%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: logouse 1.pdf
%%Creator: Adobe Acrobat 8.0
%%For: panayiotis
%%CreationDate: 16/06/2011, 12:38:37
%%BoundingBox: 0 0 148 139
%%HiResBoundingBox: 0 0 147.4020 138.8971
%%CropBox: 0 0 147.4020 138.8971
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:ModifyDate="2011-06-16T12:38:16+01:00"
   xap:CreateDate="2011-06-16T12:36:52+01:00"
   xap:MetadataDate="2011-06-16T12:38:16+01:00"
   xap:CreatorTool="Adobe InDesign CS2 (4.0.4)"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:f38a705a-03db-4644-8c6b-6cba2860a514"
   xapMM:InstanceID="uuid:79d9806b-1adc-4681-ac63-07048f744053"
   pdf:Producer="Adobe PDF Library 7.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Guide to logo use</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Corporate Design Unit</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -138.897 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 138.897 li
147.402 138.897 li
147.402 0 li
cp
clp
[1 0 0 1 -357.165 0 ]ct
gsave
0 510.236 mo
595.276 510.236 li
595.276 -331.654 li
0 -331.654 li
cp
clp
set_def_flat
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+KingsBureauGrot-ThreeSeven Initial
ct_T42Dict begin
-0.172 -0.199 1.258 0.957
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+KingsBureauGrot-ThreeSeven
Type42DictBegin
[<0001000000090009000900094f532f325f8f50ae0000009c00000056676c
79666b59631f00000da40000184868656164e4101a54000000f400000036
6868656107aa04710000012c00000024686d7478d93816df000001500000
03ec6c6f636135143ada0000053c000001f86d6178700103007900000734
000000206e616d65bdb013ec000007540000064e67646972000000000000
0000000000000001019d02bc0005000002bc028a0000008c02bc028a0000
01dd003200fa000002000506050000020004000000010000000000000000
000000004642490000200020fb020320ff38004b03be00c8000000010000
0000000000010000000100001e32e85a5f0f3cf5000903e800000000bf86
e8d000000000c12eedabff52ff3504ea03be000100090002000000000000
000100000320ff38004b04ffff52ff3e04ea000100000000000000000000
0000000000fb01f400000000000000fe000000fe0000013effe801fd0012
01c0001201f3000001d8000001f0002d01e8002601c4001b01ae001a028e
0011028e0011028e0011028e0011028e0011028e0011028e0011028e0011
028e0011019cffcb00d0001f01c100240246002402170019037300130280
001100f3002401490019014900110175002201ac002400e2001b01ac0024
00e2002401d2000101f4001a0177001301db001801d5001a01e4001c01cb
001901e6001a01a2001001c9001601e7001900e6002700e6001e016d0024
01ac0024016d0024019400210369002301f2000701f8002d01f30016020b
002d01d2002d01b3002d020600160213002d0104002d01e100090209002d
019c002d02b2002d0207002d01ee001601f0002d01ee001601fe002d01fd
001201c800070217002b01e3fffd027800000204000001f3000001c4001b
0144002d01d200010144002601da003601fe000001da00640201001401e6
002601ce001401e7001401ce00140167000001c2000201e7002600ea0026
00efff9b01e5002600ea002602e7002601e7002601cf001401e8002601e6
001401b8002601c000120186000001e7002301cc00000298000001da0000
01d8000001ae001a013d000900c50024013d001901bb003901f2000701f2
000701f3001601d2002d0207002d01ee00160217002b0201001402010014
0201001402010014020100140201001401ce001401ce001401ce001401ce
001401ce001400ea002600eaffbb00eaffdd00eaffde01e7002601cf0014
01cf001401cf001401cf001401cf001401e7002301e7002301e7002301e7
002301be0016016a003a01ce00140247fffa01e8001201f6001902490014
01f2002d02900014029000140210002e01da009401da0052026a000002a6
000701ee0012031a0000031b0000028e0011028e001101fd000a028e0011
028e0011028e0011028e001102900014028e00110184001e0169001b028e
001102ce001401cf00130194001900d0001f028e0011030700000182ffc1
028e0011028e0011021800240218002402a60024007f000001f2000701f2
000701ee001602a3001602d4001601f4ffff0320000001a6002201a6000f
00d4002200d4000f028e0011028e001101d8000001f3000000ffff5201fb
000a012e0024012e002402190000021a000001be001600f8003000d4000f
01a6000f04ff001301f2000701d2002d01f2000701d2002d01d2002d0104
002d0104ffea0104ffea0104ffbd01ee001601ee0016028e001101ee0016
0217002b0217002b0217002b00ea002601da005f01da005901da005c01da
004801da00ab01da007301da006201da004801da007c01da005f01fb000a
020b0000031b0000031a0000026a000001d4001400000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000880088008800880088009e
00bc00ca00d600e4011e013e017a01bc01d602120266028e02f4034a034a
034a034a034a034a034a034a036403a003ea04140428043c0482049a04a6
04ce04e604f4051005260560058a05e206280680069206b606ca06e60702
0718072c072c072c072c072c072c072c079407d408180854089208c2093e
0962097609aa09c209ce0a080a2c0a640a9e0a9e0ad00b280b540b780b8a
0ba60bc00bf20c060c060c060c060c060c060c060c060c060c060c060c06
0c060c060c060c060c060c060c060c060c060c060c060c060c060c060c06
0c060c060c060c060c060c060c060c060c060c060c060c060c060c060c06
0c060c060c060c060c060c060c060c060c060c060c060c060c060c060c06
0c060c060c060c060c060c060c060c060c060c060c060c060c060c060c06
0c060c060c060c060c060c060c060c060c060c060c060c060c060c060c06
0c060c060c060c240c240c240c240c240c240c240c240c240c240c240c24
0c240c240c240c240c240c240c240c240c240c240c240c240c240c240c24
0c240c240c240c240c240c240c240c240c240c240c240c240c240c240c24
0c240c240c240c240c240c240c240001000000fb00780007000000000001
000000000000000000000000000000000000001c01560001000000000000
003f00000001000000000001001a003f0001000000000002000400590001
0000000000030034005d0001000000000004001a00910001000000000005
002200ab0001000000000006001a00cd0001000000000007004300e70001
0000000000080015012a00010000000000090015013f000100000000000b
001a0154000100000000000c0021016e0001000000000010000f018f0001
000000000011000a019e0003000104090000007e01a80003000104090001
0034022600030001040900020008025a0003000104090003006802620003
000104090004003402ca0003000104090005004402fe0003000104090006
003403420003000104090007008603760003000104090008002a03fc0003
000104090009002a0426000300010409000b00340450000300010409000c
004204840003000104090010001e04c60003000104090011001404e4436f
70797269676874202863292054686520466f6e74204275726561752c2049
6e632e2c20323030352e20416c6c20726967687473207265736572766564
2e4b696e677342757265617547726f74205468726565536576656e426f6c
64546865466f6e744275726561752c496e632e3a204b696e677342757265
617547726f74205468726565536576656e3a20323030354b696e67734275
7265617547726f742d5468726565536576656e56657273696f6e20312e30
3030203230303520696e697469616c2072656c656173654b696e67734275
7265617547726f742d5468726565536576656e4b696e6773427572656175
47726f74205468726565536576656e20697320612074726164656d61726b
206f662054686520466f6e74204275726561752c20496e632e2e54686520
466f6e74204275726561752c20496e632e54686520466f6e742042757265
61752c20496e632e687474703a2f2f7777772e666f6e746275726561752e
636f6d2f687474703a2f2f7777772e666f6e746275726561752e636f6d2f
70656f706c652f4b696e677342757265617547726f745468726565536576
656e0043006f007000790072006900670068007400200028006300290020
00540068006500200046006f006e00740020004200750072006500610075
002c00200049006e0063002e002c00200032003000300035002e00200041
006c006c0020007200690067006800740073002000720065007300650072
007600650064002e004b0069006e00670073004200750072006500610075
00470072006f00740020005400680072006500650053006500760065006e
0042006f006c00640054006800650046006f006e00740042007500720065
00610075002c0049006e0063002e003a0020004b0069006e006700730042
0075007200650061007500470072006f0074002000540068007200650065
0053006500760065006e003a00200032003000300035004b0069006e0067
007300420075007200650061007500470072006f0074002d005400680072
006500650053006500760065006e00560065007200730069006f006e0020
0031002e0030003000300020003200300030003500200069006e00690074
00690061006c002000720065006c0065006100730065004b0069006e0067
007300420075007200650061007500470072006f0074002d005400680072
006500650053006500760065006e004b0069006e00670073004200750072
00650061007500470072006f007400200054006800720065006500530065
00760065006e00200069007300200061002000740072006100640065006d
00610072006b0020006f0066002000540068006500200046006f006e0074
0020004200750072006500610075002c00200049006e0063002e002e0054
0068006500200046006f006e00740020004200750072006500610075002c
00200049006e0063002e00540068006500200046006f006e007400200042
00750072006500610075002c00200049006e0063002e0068007400740070
003a002f002f007700770077002e0066006f006e00740062007500720065
00610075002e0063006f006d002f0068007400740070003a002f002f0077
00770077002e0066006f006e0074006200750072006500610075002e0063
006f006d002f00700065006f0070006c0065002f004b0069006e00670073
00420075007200650061007500470072006f007400540068007200650065
0053006500760065006e000000>
[6217 ] AllocGlyphStorage
]def 
92 28 
PrepFor2015
Type42DictEnd
1 3436 76 <0001fffd000001e30300000700002123033313331333014ab598b34c0541
a10300fe2c01d4000000>PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
1 3672 87 <00020014fff401f702500039004a0000250e0323222e0227070e0123222e
023534363f013e0335342623220615141617072e0135343e0233321e0215
111416333237270e01070e0315141633323e023501f706171d210f1e2415
0a04090a3a302a392410444b3c171c1006201f1d2704048404042037492a
3c533317160f0707cf0b1a0b151c0f06151d0e19120b12040b09060b141b
101214241e313e2048560f0d050b1119122921211a0f160c031118152736
231013222f1dfeb2101103ba060a03060e141c132629081a332a0000>PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
1 4804 95 <00020026000000c403000003000700001335331503113311269e9e9e0270
9090fd90023efdc20000>PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
1 5136 100 <00010026000001c4024900150000211134262322061511231133153e0133
321e021511012611141c219e9d0e4233182e2315019614164138feb9023e
5d313710213323fe3e000000>PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
1 5436 104 <00010026000001ad0249002000000114060f013e0135342623220e021511
2311331417161415373e0333321601ad0503870203161410140c059e9b01
010706151b22143d3a01b5273c14190f2417281f1929361efee0023e1413
11220e1412231a104800>PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
1 5536 105 <00010012fff601b50250003e000025140e02232226353436371706151416
33323e023534262f012e0335343e0233321e0215140607273e0135342623
22061514161f011e0301b51734533d6a5e070579041c2012170c051b203e
132b2519203849292745321d04057703021d191a18221d4d182a1f12ad2d
452e174a4713241008131220220d121508171e0e1d091a283928293f2b16
1123352510180c0209110e18191c17191b0d210b1b2635000000>PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
1 5712 106 <00010000fff8017202dc001d0000250e0323222e02351323353337331533
152311141e0233323637017207212a2f171f322313025557049678780d15
190c131b0c19050c0a060c1c2e2201626c9e9e6cfede11140a030705>PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 

1 0 0 <> PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
PBAAAA+KingsBureauGrot-ThreeSeven /CharStrings get begin
/V 76 def
/a 87 def
/i 95 def
/n 100 def
/r 104 def
/s 105 def
/t 106 def
end
PBAAAA+KingsBureauGrot-ThreeSeven /Encoding get
dup 86 /V put
dup 97 /a put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
end
%ADOEndSubsetFont
reset_gvm
/CCKEOU+KingsBureauGrot-ThreeSeven /PBAAAA+KingsBureauGrot-ThreeSeven findfont ct_VMDictPut
/CCKEOU+KingsBureauGrot-ThreeSeven*1 
[86{/.notdef}rp /V 10{/.notdef}rp /a 7{/.notdef}rp /i 4{/.notdef}rp /n 
3{/.notdef}rp /r /s /t 139{/.notdef}rp]
CCKEOU+KingsBureauGrot-ThreeSeven nf
CCKEOU+KingsBureauGrot-ThreeSeven*1 [9.5 0 0 -9.5 0 0 ]msf
56.6929 -175.654 mo
(Variants)
[4.30352 4.8735 4.18002 2.22295 4.8735 4.6265 3.70499 0 ]xsh
true sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: HIBBAA+Caslon540LTStd-Roman Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Caslon540LTStd-Roman def
/FontInfo 7 dict dup begin
/Notice (Copyright 1988, 1990, 1991, 1994, 2002 Adobe Systems Incorporated. All Rights Reserved. ) def
/Weight (Medium) def
/ItalicAngle 0 def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 39 /quoteright put
dup 44 /comma put
dup 46 /period put
dup 67 /C put
dup 76 /L put
dup 84 /T put
dup 85 /U put
dup 96 /quoteleft put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
def
/FontBBox {-166 -250 1000 949} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-14 -0 690 699 432 450 666 675] def
/OtherBlues [265 265 -215 -215] def
/StdHW [21] def
/StdVW [79] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
29 dict dup begin
/space <1C60D8A8C9B8707C25> |-
/quoteright <1C60D8A8C9B854D0FA4544740DF3357890155BFE85A7CA8A8A4
49B0D0C3B12A71245788B134F5699939C7D822DA3855624C0984CC4A89491906
3998D> |-
/comma <1C60D8A8C9B8707CD0173631AD69B6B75879E64F0BE0206A33A12B43
E387678F22273654AFC63F55FD7AEDCE7D83187CC9E251D7D848017DC8B5DC5D
E3> |-
/period <1C60D8A8C9B8707CBED44D3199AA1172B4E0747615C26C2003F3808
CA93BB55BB9EE299B5480B47814EC517307CE06D26905945F8C11AE725262165
E> |-
/C <1C60D8A8C9B6079FE818A62CC78159501CFA9BAF223F6FE789BEDA872CB1
CE4FED78886134C26C43A0464AAD24B9D5E7FEFAE7E5BEBBC7354BE5342BBB5C
2DF1D315D603154C08AC70DED0E73B0B8820482080D9AEF3B9FA34F127F4A6EA
C64A46D8921177E207DF543BE9609D8A8BC60E04C4A319C481F2578C7B32267B
A9F4EB8F7DAF9C00B6168B8F97698987DCB097AD9D> |-
/L <1C60D8A8C9B6079F1E769DA6C79D7F20912A7A273056EBAB39CB2E8B8D16
FA9A2B7D2F36CB02EF515048A1102E40682689B0764724A66C590177EC6CA843
DA6B793179666589D6A89F3F3946833F9715EBCF854A9251> |-
/T <1C60D8A8C9B6FF868978EF5C306F5D0373F34BB556BA168CEC6E9F1F5FE7
09337F798CFD2E9C4AEF370BB1832DF7FD13611A8DC154F32E1D4CF66B7FF797
83F637B7998B0FB31F8615CA711323CA88C917F08118263CDE6A60E3446AF3B7
570A8411CACC511E35745FDC3976B185682EEE3B> |-
/U <1C60D8A8C9B6FF867F68FE4E3334C50B87462524B382F099969D5DCFA506
8DCE12AF586A97739E6F48E52A4083390645DDD8AF8BD3234A23986E90C245E8
036C5A9EC68AC1EAE63D674E85A5A6BD2F44FB6FC9AD94BF9D2F023189872E6C
0FC2F6A6BC3769C480A18C24F48F> |-
/quoteleft <1C60D8A8C9B854D0FA454474371D4ABB70DF4CC3D33D4893B750
6705611F80E32AB1B05B904293656661411C21043F8D6E22BDB90AC6D8119A78
1AA8> |-
/a <1C60D8A8C9B77FE2B9904C0D7F0CA2759C1738FF421F4A93E94673E2FC18
EBE722ACDFF9D11CF8EAA5A2BF1098799095F4EBB8F981D95E1566A4C303C024
8DEE3CFDA1C6604B0D98A2C771A3B21063D6D959F713E9DD5F6BC22325D0ED5C
84D7932B2C47D92A0B17AEB070EF6DF7336B2BC5CAF6F172108AFC6EF547DEB3
6C111276770B9EE6A4FF3862ECB595F67F2A533DA5D991EB30CD2F6888D97265
BA3B97F912861A8EBB8EB1C9E08B44> |-
/d <1C60D8A8C9B7EF325C2C6C5A98D54C03565E4C2CC5C6E16ADBDC0F1778BB
39841C6A649B9A35E7E36667A0B133F60D8DDE80FB9BC5A642F4F17887FF1FFF
F11406F917F154D0F663325E19117D37DD0AE51B2E57867689668ADBAB51D7FA
B889C88501ECA350E80F6DA62FBD0F1F02BD3B0E6E11312D27FB06F03AD1521F
EBC37B3E83C779AED1> |-
/e <1C60D8A8C9B7A73DCED98F9622B827629618FF6DF93B90E4E41B032BAF6F
83BB85DACE86EB557DF1F61BF7F66F5E2FAE307FB7BE6646730BA560A2A605D5
C638F1E9131C455756F168366B4C59C481871D21A82A2A17945393B2A8214842
7EAA2F> |-
/f <1C60D8A8C9B81F2C46F6291F581632DB7509F1EC26A7C2A617286AA5EA8B
1D95E8369FE2FF19B94828F525D6EE86C75DA5BBEE3E6660A0AE1783172B6096
632F72DDC904C0DC1D2DD3BA0AF1688603F0BBAA97281006AEB4B68D5810B198
A8FF3C8E588523BD> |-
/g <1C60D8A8C9B7A73DB587C727920BF29B85763F6EE51C7DD5D83DEEFED39F
8C1AC305CA48A848E86545B8DB9532E88EE0C21977C949B9DEBDF18AAA7804F6
A99B8D2AEB72B81347324204FBA402B31C0AB639C7EB31CE55EA746C24BB1AA5
F427386D5E8EB0B28A866C2604B97412A7173F511DE20B19A66CE65FC95BF94A
8657E5B092B7B5D5704B27E6ACF236534E3AE4F93C4E195B3B9491AE1ABF7FF3
E063A03A62CB140B1A82BB24CCE27C19548BE35521E047A3F671DE2C55CE933D
629539A27048A518B0E66D5FD0A15CDD298CAA83C77EDDE6D7FB384CD942FE3C
671221469E851BE3D75D2F4712C6F943D27D5B397BD323FCCA7C8330BCBE813E
2042EBF85E955BC24F774CDA3E319C477F9BD6F8B0100EF4E28864CA20F5A5C9
2A1FC36E22BB57EBC758B7DACAC9AA239CBD1809A63CAE54FC671C97B079AFFB
8EFCC81A91DD251479F9B83267E233AC376E9F532081681E41302513372FC00F
ACA950DCEB2D8022007DF658733903FA41F1761EF1FB6024944254A914166B1A
922A8D8D> |-
/h <1C60D8A8C9B7EF32570E39C3D234DC7148FAB335B78B79F3642BBECAB88D
1B32802092F2B14DA1BA2B3D7ACF0BA8EA5C1205F68965A29E8E7B1640877A5C
7604DA0CAB54EBDADD6238B9E80C552D5BC0DBBB40BC40478216EC0A5FF0DA87
2025978889170C3BC8D3A62589836307A445D90FD2696B318348A41FC130AD7B
EEF8F898DD6E719236134DA189BBF0B3A2> |-
/i <1C60D8A8C9B854D088836E48E65AC24B0C1ECE3F7B087C4313F96580064D
C86C45D98B1F6967082136A73EC7FE63FDC7A93A2370E5537CCFEB66D4006195
E885715E61F3F0BB1A77F67BA81B3F2122D40D77DBE8130B6CCD04E3AA2E9AFF
17114C2351EC7CDD2204FC967E15B838372BAFFA9793C8AF141FFFE064> |-
/l <1C60D8A8C9B854D088836E49D4727F98C03E99EF8ACF52C1E1BB55F9815C
7A7AA24772CE97F2E02B368A6FF60E0478F9D2273D808F6442D6C3CC5D7D6091
4385EC97FA633F0061A599D7AFEE> |-
/m <1C60D8A8C9B6B41CA07134C0361A2DDD83594737475500C438F6D0701E9A
14EB785D1B074BABDE13DAE2C93C11D994BEC0F00D185AE9929FF295D1E47C60
AEDFB55D8ED7C7BF7F9C6DF6A13E927A73B5D3F8C463E77FDD00DED2BFB54992
A211A6F017AB110D8F447962571A595004AEA8E7B6E2EACA7CF36D9A02FA2608
E3444C8C7F50FD11C951A61FECDEF1CE8FE827D45A9BFFCA4AF701A0D8E77EC4
F2CCF89E64DF00021C85A7C4A275> |-
/n <1C60D8A8C9B7EF32570E39C3D73FC17B3CE3CC1874B746728854A1EC258E
7F4C7E9E9C3F2633C94ED0AE49D13C926A88EE2E76C11F8CEF912BD839450466
A52091035B5F2C921526A170994CE1DD43767DB5B4093129FF5B792A61A36B0E
E257A900360D45B8756B9AFF8088F03571506FCDFA0AF5A4> |-
/o <1C60D8A8C9B7A73DCE8ADACD49D21CCB0698EF471C1D378ED1F0D37A1DA3
1FE77F2F3B063781E206439C6C38CCB186ACC6FF149F9BCAC38E2B46DCD1D4BD
5B070D1E9FC9D4CEB533F367A4245207D8F6> |-
/p <1C60D8A8C9B7EF3227B714F2496F466B1352A919443E974C230B9FFCCB52
9822DE08C58BB26F6B0FE658FD0049DC8640C2C5C345B274001DEDA7C78B14B5
3DCEEA416C9DAA7031233FDE3C14370A208831D9B1722B659F8CDC2B07987A6F
43CBEE6B9A39ECADC00858E28254CD413252990CB922C0362C8D9F0637C257E8
9C71687DE8CF08B74625194D43FBA5> |-
/r <1C60D8A8C9B81F2C46F6291F1872C9DDD9E75F75FC3DB0CDD63845C68D67
ED5298A8F8BB04C712FB35B0DCA3B67924804ABCF59003742C02D779F7E47C22
E2FB8DBCE715D2E8B70185B9D5B0E8F726D7270B2AF882B7475F516591FFBA8F
4EB023103EB0AD1A79072557567D692ACFC8449F2E8FC3A97644EBD6B677EA3C
FA374A5A24B96DE1B0A069B4749EB08D> |-
/s <1C60D8A8C9B7361F75F2D44F522EFC96724DB37708E614689E9D36FACD21
D3D028FBA96C4DFF5C2AE94021047B6607CC9484CE96E1CE44ADC735C8F292A4
29669737579857523F65A12F15CF43C821CE23EE97DAF353182BFD9FE3D6C580
2D84FBD2A4A589F762B74794001D06EE359B80F61E5908CC08A01AF2A7717167
B61A48478EEEDD4F7E9416880BAAB64CC737EBD75CA1D00BD75F> |-
/t <1C60D8A8C9B81F2C4DB0EEC9001BE67FE3E101D1D6DF1E4B324C6D3C2389
8C9869FB990FAB8D3179F175672123401753ED514D859A457DEFC2857BE1F8BB
3E15707977324EB865D8D82762E9A50A47A7AB49D744BFB579> |-
/u <1C60D8A8C9B7EF325C35AEE533D1136CFFE9D476CBA5AD337E0D3FA951D1
0E8CF00A6E4C6D02E0D4468AF5874074A378A082F87C20C82280293C8FC63AC1
88551D1CC7A7AD5038A8D4B3CC132749329F100D6E5E4F932F16B2E84A036C88
858B38CD21AA586B56594FCF1A81BB049149E6735555> |-
/v <1C60D8A8C9B7A73DDBE6E06728F23A10253D01BA497705A23A85395DEAF1
E47D22768087E07C1FF8D9930652416F3BABBAE8554D168B5F15C67378CCF4E0
302E5D07ED9112DB3D8F6EBAA3CB65C3F5CBB85006C1D9D5292E1BB3D9EE14BA
C463B5251AA78D103D19DB345D7694> |-
/w <1C60D8A8C9B6079F00D3839BA2D2D496D9FFB9FFE9CBF7D0BAF8C54CA02D
1CFCBCA773D07FCB70F80995F31B96C1CF5FE2F00855CAA38C585019CB6CADDA
37FC844D8EC26ABDCD10C4F65936BE09EE716252E6C99DD824A0158B21DE32EB
5BCFC4D025D7A55801C271A2778DB3283AF63F1A3A3CEEF571830904BA1DA0E6
54960E48CFC287B7A30B9F08975C1A31F217E67832A84D69D7DF4B8E533B709E
780428D26482BE8A0AB3> |-
/y <1C60D8A8C9B7A73DB5BA0DEFCB7B3DDA2B9AF01231DA725AC56C5F2B55FF
5B03BAFC73D7CB9362B0F86AB7A2DF164F94C612D9A2C4C8A1B6707E66C6A26D
7E4A0E11A98F020CC7DDB98566EED2F48378274A91A2454652681FD172365DED
5167BA15BBD65815B9C4C5A62F613D8B2427E9174EC0899B06CA18A2ABAD2E46
7820C8D6BCE9608F85F784F6057D7225801442FAE8FEADD686ED178272E06BEF
97AE324876BC66D1E07ED4CFDC79757E50> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/CCKEOV+Caslon540LTStd-Roman /HIBBAA+Caslon540LTStd-Roman findfont ct_VMDictPut
/CCKEOV+Caslon540LTStd-Roman*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright 4{/.notdef}rp /comma /.notdef /period 
20{/.notdef}rp /C 8{/.notdef}rp /L 7{/.notdef}rp /T /U 10{/.notdef}rp 
/quoteleft /a 2{/.notdef}rp /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
CCKEOV+Caslon540LTStd-Roman nf
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
56.6929 -163.654 mo
(There are two forms of the College logo, one with and )
[7.296 5.187 4.65501 3.06843 4.655 2.5175 4.123 3.06843 4.655 2.5175 3.06844 6.76399 
4.655 2.5175 3.06844 4.65499 3.06843 7.81842 3.60059 2.51749 4.655 3.06844 2.5175 3.06842 
5.18701 4.655 2.51749 6.76401 4.655 2.54599 2.54599 4.65501 4.655 4.65498 2.51752 2.54599 
4.655 4.655 4.655 1.9285 2.5175 4.65498 5.187 4.655 2.5175 6.76399 2.54601 3.06842 
5.187 2.5175 4.12302 5.18698 5.28198 0 ]xsh
56.6929 -151.654 mo
(one without the `University of London' strapline.)
[4.655 5.187 4.655 2.5175 6.764 2.546 3.06844 5.187 4.655 5.187 3.06844 2.51749 
3.06843 5.187 4.655 2.166 2.54601 7.29599 5.187 2.54601 4.655 4.655 3.06842 3.60057 
2.54601 3.06842 4.655 2.5175 4.655 3.06842 2.5175 6.76401 4.655 5.187 5.187 4.655 
5.18698 2.1945 2.51749 3.60057 3.06842 3.06844 4.123 5.187 2.54599 2.54601 5.187 4.65498 
0 ]xsh
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
true set_gvm
%ADOBeginSubsetFont: QJJAAA+Caslon540LTStd-Italic Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Caslon540LTStd-Italic def
/FontInfo 7 dict dup begin
/Notice (Copyright 1988, 1990, 1991, 1994, 2002 Adobe Systems Incorporated. All Rights Reserved. ) def
/Weight (Medium) def
/ItalicAngle -18 def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 39 /quoteright put
dup 76 /L put
dup 85 /U put
dup 87 /W put
dup 96 /quoteleft put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
def
/FontBBox {-198 -250 1013 939} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-14 -0 690 699 432 443 675 675] def
/OtherBlues [260 266 -215 -215] def
/FamilyBlues [-14 -0 690 699 432 450 666 675] def
/FamilyOtherBlues [265 265 -215 -215] def
/BlueScale 0.0479583 def
/StdHW [21] def
/StdVW [73] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/space <1C60D8A8C9B8707C25> |-
/quoteright <1C60D8A8C9B854D0FA4544740DB53E5B4A70AB5DCD1F864F3B5
67D4BB046C2C5420227E732DD26077875B2A3C98AA2447046376E064DE7836BC
D1CFEC5> |-
/L <1C60D8A8C9B7D8BE6A7F943CE179F870F25E2DA5E41D83FC391B3759791D
C2E6B0C7CB9993BC3D9557E59B779756CE56346475BC9D46ECF8FA36142EBF8C
28492D9FF53FE9F0640EBBBEDFD87C70D2964D27EC403071D5282CD622EEEC76
FE89D0AF8E> |-
/U <1C60D8A8C9B6079FE818A62CCC89CEADD75EB117F21E11F387D9C1DA61CB
7F4D52D8819321E6F88E7560DECF5398A9EBF98960DEDFBC5A6007365658D9F9
B523E5194D50305337607AB3772AA1F160E00F9F9A999347A17085A38D1262AD
17AF42212B51BD1BB99933415463A410CCA097304DFCFB1BE8FC5BD8BF69FDBF
3C77D61D624AE5934852FB0029208A> |-
/W <1C60D8A8C9B6B41CDEDC781B3815D0E157A7B8E139E3EC9FA098A1961E77
5364FFD6DB3BD91FDCDEB97F8A9A732185667A092DECC59DE4316A2DCF0B3127
29F2D1AE32271BCDA1219723B3061298F84B312B80EEBE0CDF711EA63F0B5005
98F803A970CAB85FB881AD1D48E515935C33AF728CC9E04D712E0A912A7BEBD1
A696CDB8BD2041A5C2C0FD5212324B5EC5C7DF7070A9AFA3D07CDAEBE0B855F6
A057E23B399111C1B5A30F6442F1E932107C1EDBC6573A5E86479B2773EF0484
4ACA27D9370A67CF9610CCB433F0E27D6D71E1C8F4> |-
/quoteleft <1C60D8A8C9B854D0FA4544740DED16DD40A665058FE403CB06F6
B48ED872DED944CC3E8E5276DF47B3A96E6A909A38A29735DC68F48B39806BEA
FB942C> |-
/a <1C60D8A8C9B7A73DCEB3EB5D23E20AE8B3CD0C4CD4E1CC1DBC78B083DA39
F7669C85400AA72CCDDF30131058E43268D0704DA53A4712736025EEFC357F5E
066568D27C7E583054720CDC0F479EB702BB3B8325BB12BCD41B2BF633A26A50
7A92D5091C7AB58D73032D8199926F5AE8008C7FEE4B36D3C7F5E07269F25EC0
B55BF18C3019C88AEE938D21E9589F6E4B6004ADED42040A0D58A11C5214B77E> |-
/d <1C60D8A8C9B7A73DCEB3EB5D220977D37A2966DF2AC03D10A1C3DEAC3A06
3E802CCFBC4CCA5E2E347596229B1A99CEA0E4EADA3974E47915DEAFD9E551A2
5E792B80B33883E9B8AC6952FAF470F6EDD4E005AF0506DA57D1BF5DFD4173D2
E20F3B51210F827FE74480EE244737AC6C24DCB44ED129631F378B604132C7F4
560AA9CC10B447242E4AEE8B676182C5E641273AF4368B48166E2E9183744F1E
D3524C4E7683> |-
/e <1C60D8A8C9B81F2C4DA7AC74AAC65EF07EBE5D4F46E7BE95E1E2A5953698
CE9BB1420B45411C7CDB6A2D28E8AA718FD338E62325C84977E41B3BF846DA2C
34414C712EBBC2A5701F3FDCF01542FC279C3B04027497864228676385317CCF
DBB3F7A234EA75B5903DDD0A88D265CF9070A025> |-
/f <1C60D8A8C9B854D0F806961A171545040919D753D966C961E9C504AAC62F
779E5EAE732DE5F06C095F064C7E442D35EE1B97720ED9E270AEBAADF18A2B7D
DE887B223AADB588A9DD9276490FF2FEB174901580F58D93BC101C0427171534
47AAE45B60C1A9BB6B4938E097D2BB3772BB0F7D216A016B2539D304604B9974
05F1> |-
/h <1C60D8A8C9B77FE299176F630C48C9C01972B07DDF9AD10C32299CE022F0
EBB0912EB98C05EA5049FC948AD6786549F953C990CD358CCB273F1B38852292
016DF9695BF6A0A49A1C79EF3AE040DAB4F3D8EE27D366234018C4FCFB846E64
E6AC5051F025D4752F88FE7882B5FDBC6300B0FCDAFA0C3B1E7162FF7EAAE7EB
B26FA18B302236008F6E74585C00F44CA9217B36BD34839D6C81BA777D8018D1
A7E025641004D4B1550873777670C81367B1> |-
/i <1C60D8A8C9B854D083A90EFBCAD5DAB5C2D1D3D178E97A48981C093F724F
27805A3B66AAA1A03DCACB9ABCF9EDC9E9B41F0FB0BEF2467D51DDAD38EDAF45
455E6594343B34E38E6BAAF11EF6A523E576AB5C125195796320719E1496D7C1
8A574D683D26DEFCC26A444C83889997C212BBFFC3AB60BE7896E1641A8D46FE
F3B335CC2B424EBB57EB76844FC2DDF6BC14D19F5F06F625E68238A42F> |-
/l <1C60D8A8C9B854D083D72713E99485BC06FF0D1047D19EBF7C561180A5E8
36D62791FE54C895FB23EB63B5A4C878D91BC85A7BA43EDA4CC486EE8F97F77E
809729D19FE581A9CB76EC3F9A5FAD9CBE2FDDF36464CDFDC648F354FD807A> |-
/n <1C60D8A8C9B7A73DEE9439F936E2E46AA2A97D64BD15985690112D766675
9636F2FDA3DF835813E8BB0EB40CFEA81B2FB2FB58B4E2A4E54A5E8372040210
7F021A2CC1DD3B79A1437F0F6D49CCE02D023EA477AA82347D97F339FA371C66
A441E13D1828B9D8D537C05C00D01EA0575E39B800E4CB78FE944A0EB7EFC1C9
5B061A537F597D82FED3533CF6FFF368A7F6D08F1ADFAED5FD2EB5E6742E706E
76FCFA0F490C6183FE24BB5215805526D6C5A68BAB672C38B156DC3C84ECA44E
23974E7493C5A0> |-
/o <1C60D8A8C9B77FE2B9B1E85F642A3A0A39597490818EAED8F3499624A172
64E26C3EF56F6016E731686F6C8912AD3F69627EAFBCF52E275F0562BFFD36CB
0D04A2B2C7BE5F2041C9D7752AB321BCA8775EA7A2017413B5> |-
/p <1C60D8A8C9B7A73DB587FB15603B086A56EF8D65725A1F407D6AB0AC0DB7
42ADAC737A2BF90123F4690AD38E1BC5A70FC386963966A42EF618ADEFDFC40C
4A9DCF52EA92AAE35D1C9696B88AE961F2F0F780746666FF7E462B19878F6A57
2A1D2B6E66704D627C0A0FA0BD1BEEE6C71476DFBA135EFF437AD721D98DD425
A9B1A4A6318C016AA8ADAEAB1377F6CC7795D527E5F4A00C> |-
/r <1C60D8A8C9B7361F55E947F95B3DCCB3C22F9AFB757893055DD03A5C6DEE
0796FBD1517BE4061586449E8C86E4FB0418C0618FA708D46D9B3F231F9DEE83
79EB63637F4892D742569961EA402F927C071B31E353E03AA9BA1CB39C94B8B9
35CE0842198A71E700> |-
/s <1C60D8A8C9B81F2C4DAD854F957AFA471B339B51FF4D4CB067F561983100
56D71C822AABF03CF63F29EC9E9C9AA7459CE1AD552AF7DAC2639CEC8ADB452F
55120BFB7E04C892A0AE51CFB64B335304D6C6627230BC684F3ACCA580FF0EB4
BC58> |-
/t <1C60D8A8C9B854D083A26B308C2D8BB3E3DB37A1FBE46F2FD3E0611C2737
BECEA29515432526EEFC174C735FCCF59526AC27EF8B82165098C6E568F21108
CC975A64A910BDAB540E5D7C41C2246514A7FF72E3ACAC1F686493EB18F38F28
6F620D054B0AB7083A565E> |-
/u <1C60D8A8C9B7A73DCEA166732461C1B34F9BC2A1CD7EFCFAF1C3F88ECC88
7504FDE173F90B004E6FEF7378281B31DDA37FFC2DB31AD3D89F634122119219
762126EB7D805E0DC1FCE152F3E1EA56759F84245EBF071CB62AA6F48F51535A
733FEE43CB0F96B637C2BE0548BA72E42A3E4FD1618CD9A04C7F5763675A7528
EB2689D82AE2C955FEEDFA4B484B6AD7E110D25D472A0F381250433BB519D8ED
DE2890180832C74533F83769FAC38E1754EF0CE8B6EF94F6491C69F5A28A4756
70F7> |-
/v <1C60D8A8C9B7A73DCED5549DF89F51829EB17AD09251D1F554915713B75D
66F6BFB62258FDFB01C4B1BDEE81585C73E729162E838D8572D300B26E7E13BB
F54F16B72A63B8AA6550DF6806643C2572BC4674ADDBDDA2290DA43EE697DDBE
F64220021D6167909A0F3585767172596CAB559FC2C21B9321F4FFF0B842FC41
C1386A079E1B74FFD161B3898F11FFADFBF11C752201ECAACE1D0B46B27CE89F
031BC8BC047F2703F0EEB5CC984354CEA6CF2CB6216E98A512EF9434E5692C51
3F1C13> |-
/y <1C60D8A8C9B7361F0E35E0F93AE439EF2958C3983B17E60D67971400198C
AB11D090F68E470488EDC8512C201509BC2111E83A30664D2F1C2535940A07EF
C512D553BDCCDA3443F56CA1A5E19307250C5A2057E39E80AE5FEF262E13D8E8
9E9F958B71D966890C98146390E1F661BBF7FDC595528F9ECD90E02DD343126A
EFFDA1D2630AFF1557F247F63C9157CD461FFACDE70BD3D9D8858396F4FDD72B
2A36FDDCDA78D04F3D> |-
/.notdef <1C60D8A8C9B66A6BD6EC8CE1EFFBED1AB5C97DF707F4D6F7107D7D
E2750C41837F02C81B5CFADB3C6B98FBFAA60A9B01985CC2C3727B34D13FB876
D6BF2C8FAC5364CE7C36892C2E8B88008B9BD47414A2C6F809C4EDCCBD> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/CCKEOW+Caslon540LTStd-Italic /QJJAAA+Caslon540LTStd-Italic findfont ct_VMDictPut
/CCKEOW+Caslon540LTStd-Italic*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright 36{/.notdef}rp /L 8{/.notdef}rp /U 
/.notdef /W 8{/.notdef}rp /quoteleft /a 2{/.notdef}rp /d /e 
/f /.notdef /h /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t /u /v 
2{/.notdef}rp /y 134{/.notdef}rp]
CCKEOW+Caslon540LTStd-Italic nf
CCKEOW+Caslon540LTStd-Italic*1 [10.5 0 0 -10.5 0 0 ]msf
56.6929 -127.654 mo
(Without `University of London' strapline)
[8.16892 2.919 2.919 4.662 4.662 5.25 2.919 2.8875 2.91901 7.58099 5.25 2.91901 
5.25 3.49641 4.08459 3.49642 2.91901 2.91899 4.08458 2.8875 4.662 2.91901 2.8875 6.41542 
4.662 5.25 5.25 4.662 5.25 2.91901 2.88748 3.49643 2.91899 4.08458 5.25 5.25 
2.91901 2.91899 5.25 0 ]xsh
true sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
56.6929 -115.654 mo
(This is the standard version.)
[7.296 5.187 2.546 3.60058 2.51749 2.54601 3.60057 2.51749 3.06843 5.187 4.655 2.5175 
3.60057 3.06844 4.12299 5.187 5.187 4.123 3.06843 5.187 2.5175 4.655 4.655 3.06842 
3.60057 2.54599 4.655 5.18701 0 ]xsh
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
CCKEOW+Caslon540LTStd-Italic*1 [10.5 0 0 -10.5 0 0 ]msf
56.6929 -91.6535 mo
(With `University of London' strapline)
[8.16892 2.919 2.919 4.662 2.8875 2.919 7.58101 5.25 2.91899 5.25 3.49643 4.08458 
3.49641 2.91901 2.91899 4.08459 2.8875 4.66201 2.91899 2.8875 6.41544 4.66199 5.25 5.25 
4.66202 5.25 2.91899 2.8875 3.49643 2.91899 4.08458 5.25 5.25 2.91899 2.91901 5.25 
0 ]xsh
true sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: HIBBAA+Caslon540LTStd-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
CCKEOV+Caslon540LTStd-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B8707CBED44D0ABFBC402DF15F1F012E8EE22EA39A7CD5
E3503D2A686CC7FAFE5166769DB14C6884A3FA522DC7277DD90D7F937F991A7E
510F23D3B96C8F14CE4DE7D4AA71DB0F441A7114272FF51606030AFC6654546A
A2B6575A8171656C2BC33AA15AC9EE6CA4E5> |-
/b <1C60D8A8C9B7EF32444886344390F03B2D9A920BAB4E3DD6E533601C2703
531BEEB260CD29F4565D307AFC32973DDD38A011ABFF8BE17F31B28A9EDE9F17
563C781399C65C86F525DCC8B4BCA9D9D18270814E4D4ACE819202481D293E0C
37F1C13236A0D259979D8A5F66F188289824D8E0A3E1C4B02B1AF51DFC862497
4D5C6A29B1A441140741BF485F6C8B745B98EE9B8D64D68A77A313B8DEF0E9CE
C7A3EF42289C86A0B457583046FE96FA625C3E1B82BC04981C5CF5A97D4C273C
A5B7B3ADF7357B8BD5D13F9531C4E051A83D3C49703A16C28BA2B5C38D4C1C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CCKEOV+Caslon540LTStd-Roman /Encoding get
dup 58 /colon put
dup 98 /b put
pop
%ADOEndSubsetFont
reset_gvm
/CCKEOV+Caslon540LTStd-Roman*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright 4{/.notdef}rp /comma /.notdef /period 
11{/.notdef}rp /colon 8{/.notdef}rp /C 8{/.notdef}rp /L 7{/.notdef}rp /T 
/U 10{/.notdef}rp /quoteleft /a /b /.notdef /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
CCKEOV+Caslon540LTStd-Roman nf
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
56.6929 -79.6535 mo
(This logo must always be used on:)
[7.296 5.187 2.546 3.60058 2.51749 2.54601 4.655 4.655 4.655 2.5175 7.81842 5.187 
3.60057 3.06843 2.51749 4.12301 2.546 6.76399 4.12302 4.655 3.60056 2.51752 5.18698 4.655 
2.51752 5.18698 3.60057 4.655 5.187 2.5175 4.655 5.187 0 ]xsh
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
true set_gvm
%ADOBeginSubsetFont: HIBBAA+Caslon540LTStd-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
CCKEOV+Caslon540LTStd-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bullet <1C60D8A8C9B7A73DB965AD4EB736E70B85E2FE3F29691FE2C0444FD
FD191D6936147EA5643C3F2329027C2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CCKEOV+Caslon540LTStd-Roman /Encoding get
dup 183 /bullet put
pop
%ADOEndSubsetFont
reset_gvm
/CCKEOV+Caslon540LTStd-Roman*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright 4{/.notdef}rp /comma /.notdef /period 
11{/.notdef}rp /colon 8{/.notdef}rp /C 8{/.notdef}rp /L 7{/.notdef}rp /T 
/U 10{/.notdef}rp /quoteleft /a /b /.notdef /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /.notdef /y 61{/.notdef}rp /bullet 72{/.notdef}rp]
CCKEOV+Caslon540LTStd-Roman nf
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
56.6929 -67.6535 mo
(\267)sh
true sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
61.3479 -67.6535 mo
( )sh
65.1954 -67.6535 mo
(stationery)
[3.60057 3.06843 4.12301 3.06843 2.546 4.655 5.187 4.655 3.06844 0 ]xsh
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
56.6929 -55.6535 mo
(\267)sh
true sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: HIBBAA+Caslon540LTStd-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
CCKEOV+Caslon540LTStd-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2B9904C0D71C4911C1D553DC7E8DF3FC106D5F0E6CBBA
964FDE51FCE8ABC4FD84F8940D3A80E239694D3170C5E77658C0A3E74F1ED0A2
4F6D9170830FBCF4AFD8CD5BD36F78B698E9D734FBFB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CCKEOV+Caslon540LTStd-Roman /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
reset_gvm
/CCKEOV+Caslon540LTStd-Roman*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright 4{/.notdef}rp /comma /.notdef /period 
11{/.notdef}rp /colon 8{/.notdef}rp /C 8{/.notdef}rp /L 7{/.notdef}rp /T 
/U 10{/.notdef}rp /quoteleft /a /b /c /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /.notdef /y 61{/.notdef}rp /bullet 72{/.notdef}rp]
CCKEOV+Caslon540LTStd-Roman nf
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
61.3479 -55.6535 mo
( )sh
65.1954 -55.6535 mo
(items for an international audience)
[2.546 3.06843 4.655 7.81844 3.60057 2.5175 3.06843 4.655 3.06843 2.5175 4.123 5.187 
2.5175 2.54601 5.187 3.06842 4.655 3.06844 5.18698 4.12302 3.06842 2.54599 4.655 5.187 
4.123 2.54599 2.51752 4.12299 5.18701 5.18698 2.54601 4.655 5.187 4.123 0 ]xsh
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
56.6929 -43.6535 mo
(\267)sh
true sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: HIBBAA+Caslon540LTStd-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
CCKEOV+Caslon540LTStd-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B6079F1E769DA6C79D7F209EA57C3909ACC77306083A3C9959
5775D760720F53B1B2D946D1AA71B565AAE83348B0DD08784249154E61D87789
E9C04976B67997B90AFE314CD6A069F2D642601868323180930363C724E21510
D48B2E52FA215E8357B661E21C94BC985C465CFFF9167DE116DC2DFCA4C0CAFD
3F4EF16920E1> |-
/k <1C60D8A8C9B7EF32570E39C3C59A4491AC90FE86DF63ADB0F62C2BE7DCB6
32C308CA375076C029CD8C18490AB8D0B4DC84A6C644590BD5540CF6BF02A8E8
7E4D8F85C5E3066561B24C9CD143D3CED5D20F31181CAA48D5DCE7C1AE5A7DD1
58267E4FDC18CA8AF616C5C97DBC58727252CF4C4C91083C1BD561CF006FB3C4
3B8317E497BA53D97ECBC3B137D9291E4CE9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CCKEOV+Caslon540LTStd-Roman /Encoding get
dup 75 /K put
dup 107 /k put
pop
%ADOEndSubsetFont
reset_gvm
/CCKEOV+Caslon540LTStd-Roman*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright 4{/.notdef}rp /comma /.notdef /period 
11{/.notdef}rp /colon 8{/.notdef}rp /C 7{/.notdef}rp /K /L 7{/.notdef}rp 
/T /U 10{/.notdef}rp /quoteleft /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /.notdef /y 61{/.notdef}rp /bullet 72{/.notdef}rp]
CCKEOV+Caslon540LTStd-Roman nf
CCKEOV+Caslon540LTStd-Roman*1 [9.5 0 0 -9.5 0 0 ]msf
61.3479 -43.6535 mo
( )sh
65.1954 -43.6535 mo
(items involving the University of London)
[2.546 3.06843 4.655 7.81844 3.60057 2.5175 2.546 5.187 4.65501 4.655 2.54599 4.655 
2.546 5.187 4.655 2.51749 3.06844 5.187 4.655 2.5175 7.29601 5.18698 2.54599 4.655 
4.655 3.06844 3.60057 2.54599 3.06844 4.655 2.5175 4.655 3.06842 2.5175 6.76401 4.655 
5.187 5.187 4.655 0 ]xsh
56.6929 -19.6535 mo
(King's College London now has its own degree awarding )
[6.764 2.546 5.187 4.65501 1.84299 3.60057 2.5175 6.76401 4.655 2.54599 2.546 4.655 
4.655 4.655 2.51749 6.76401 4.655 5.187 5.187 4.65498 5.18701 2.5175 5.187 4.655 
6.76399 2.5175 5.187 4.123 3.60057 2.5175 2.54599 3.06844 3.60057 2.5175 4.655 6.76399 
5.18701 2.51749 5.187 4.655 4.655 3.06844 4.655 4.655 2.51749 4.123 6.76399 4.12299 
3.06845 5.18698 2.54602 5.18698 4.75 0 ]xsh
56.6929 -7.65353 mo
(powers and puts an increasing emphasis on its own brand.)
[5.187 4.655 6.76401 4.655 3.06843 3.60057 2.51749 4.12301 5.187 5.187 2.51749 5.187 
5.187 3.06842 3.60057 2.5175 4.123 5.187 2.5175 2.54601 5.18698 4.12302 3.06842 4.655 
4.123 3.60057 2.54599 5.187 4.655 2.5175 4.655 7.81842 5.187 5.187 4.123 3.60057 
2.54601 3.60057 2.5175 4.655 5.187 2.51749 2.54599 3.06844 3.60057 2.51749 4.655 6.76401 
5.18698 2.51752 5.18698 3.06845 4.12299 5.18698 5.18698 0 ]xsh
65.1968 4.3465 mo
(The use of the University of London strapline on )
[7.296 5.187 4.655 2.5175 5.187 3.60058 4.655 2.5175 4.65499 3.06844 2.51749 3.06843 
5.187 4.655 2.5175 7.29601 5.18698 2.54601 4.655 4.655 3.06844 3.60056 2.54601 3.06842 
4.655 2.5175 4.655 3.06842 2.51752 6.76399 4.655 5.187 5.18698 4.655 5.18701 2.51749 
3.60059 3.06842 3.06842 4.12302 5.18698 2.54602 2.54599 5.18698 4.655 2.51749 4.655 5.28201 
0 ]xsh
56.6929 16.3465 mo
(publications is optional and is likely to be used less often )
[5.187 5.187 5.187 2.54601 2.546 4.123 4.123 3.06843 2.54601 4.655 5.187 3.60057 
2.5175 2.546 3.60057 2.51749 4.65501 5.187 3.06843 2.54601 4.655 5.18698 4.123 2.54601 
2.51749 4.12302 5.18698 5.18701 2.51749 2.54601 3.60057 2.5175 2.54601 2.54599 5.187 4.655 
2.54599 4.655 2.5175 3.06844 4.655 2.5175 5.187 4.655 2.51749 5.187 3.60057 4.655 
5.187 2.51749 2.54601 4.655 3.60057 3.60056 2.51752 4.65497 3.06845 3.06842 4.655 5.28198 
0 ]xsh
56.6929 28.3465 mo
(than previously.)
[3.06843 5.187 4.12301 5.187 2.51749 5.187 3.06842 4.65501 4.655 2.546 4.655 5.187 
3.60057 2.546 3.781 0 ]xsh
58.675 40.3465 mo
( )sh
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+KingsBureauGrot-ThreeSeven AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+KingsBureauGrot-ThreeSeven gcheck setglobal} if

1 0 3 <> PBAAAA+KingsBureauGrot-ThreeSeven AddT42Char 
PBAAAA+KingsBureauGrot-ThreeSeven /CharStrings get begin
/space 3 def
end
PBAAAA+KingsBureauGrot-ThreeSeven /Encoding get
dup 32 /space put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/CCKEOU+KingsBureauGrot-ThreeSeven*1 
[32{/.notdef}rp /space 53{/.notdef}rp /V 10{/.notdef}rp /a 7{/.notdef}rp /i 
4{/.notdef}rp /n 3{/.notdef}rp /r /s /t 139{/.notdef}rp]
CCKEOU+KingsBureauGrot-ThreeSeven nf
CCKEOU+KingsBureauGrot-ThreeSeven*1 [9.5 0 0 -9.5 0 0 ]msf
58.675 64.3465 mo
( )sh
58.675 76.3465 mo
( )sh
58.675 88.3465 mo
( )sh
58.675 100.346 mo
( )sh
58.675 112.346 mo
( )sh
58.675 124.346 mo
( )sh
58.6776 136.346 mo
( )sh
58.6776 148.346 mo
( )sh
58.6776 160.346 mo
( )sh
58.6776 172.346 mo
( )sh
58.6776 184.346 mo
( )sh
58.6776 196.346 mo
( )sh
58.6776 208.346 mo
( )sh
58.6776 220.346 mo
( )sh
58.6776 232.346 mo
( )sh
58.6776 244.346 mo
( )sh
58.6776 256.346 mo
( )sh
58.6776 268.346 mo
( )sh
58.6776 280.346 mo
( )sh
true sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: GFNBAA+BureauGrotesqueFiveOne Initial
ct_T42Dict begin
-0.184 -0.199 1 0.934
 256 array 0 1 255 {1 index exch /.notdef put} for  /GFNBAA+BureauGrotesqueFiveOne
Type42DictBegin
[<00010000000c000c000c000c4f532f3282ff3fd5000000cc0000004e6376
7420228054380000011c000000b46670676d8333c24f000001d000000014
676c79669b77dbc400000f8c00001a6c68656164c6fdeb2b000001e40000
00366868656106d603750000021c00000024686d7478e46429e900000240
000003d86c6f63610012df8200000618000003dc6d617870016c01960000
09f4000000206e616d653545065600000a140000054f707265700a8d1495
00000f6400000028676469720000000000000000000000000000019a0190
0005000102bc028a0000008f02bc028a000001c500320103000000000400
00000000000000000000000000000000000000000000416c747300400020
f00203a6ff38000003a600c80000fffa024703060310004f00446a33be04
8952c282098c337dd64738f45088c81f2afa64761d4cc1f66e9805138aa9
3e3ee095aa3560411c89f98f6d610547c5f5708b1e0a958b247cbce74f96
c53d08fb3a75d9364fadb008fe3d8aa8104fecafb99e80d9c03972511f81
99ae4844b4e6c1944f39fa9524ac4b4dbd91c19168a053fb90db83734ea3
d6ccb96665c410babe5b35b7958eb8736a7372733a12caa45264d01679bf
164cc6c668060f299a9b000200544001002c764520b00325452361681823
6860442d00010000000100003b938e535f0f3cf5000003e800000000b25e
53b600000000b25e53b6ff45ff3803e803a6000000030002000100000000
0001000003a6ff3800000400ff45ff4603e8000100000000000000000000
0000000000f601f4003f0000000000f0000000f0000000b3002701200032
024000240240003502b8002602f0002700a900320169003601690036018a
00330294005001030033013100320103004601c200000205002c013b0011
01f4003701f4003601f4002401e0003301f4002f01dc001d01f4003601f4
0029010300480103003301b5003e01fc003701b5004601ce0042034a002d
025a00140251003e026e002d0274003e0206003e01e1003e0285002d026c
003e00cf003e01ad00170232003e01cb003e02e3003e0264003e028e002d
0223003e028e002d024c003e0232003201ee00120262003a02370014032e
0014024a001d0230000c021400270104004f01c2000001040006020d007c
01f40000021c00b601f40027020c003c01e3002b020c002b01fc002b011f
000701d5002501e8003c00c6003700d2ff9201bc003c00c6003c0300003c
01e8003c0210002b020c003c020c002b019b003c01c70031013a000b01e8
003901cc000f02a7000f01d2001001c3000b01c1001d017e003c00f30056
017e0029020d0070025a0014025affff026e002d0206003e0264003e028e
002d0262003a01f4002701f4002701f4002701f4002701f4002701f40027
01e3002b01fc002b01fc002b01fc002b01fc002b00c6003600c6ffd600c6
ffe800c6ffe001e8003c0210002b0210002b0210002b0210002b0210002b
01e8003901e8003901e8003901e800390220003a0190003401e2002b0227
001b01d0003201f400460247002501db003e030b0020030b0020026f003e
021c00a6021c0089022100070348ffeb028e002d02ea000702ea00070251
0024025100240240001402510024025100240251002402510024030b0020
02510024014000010157000e02510024031800290210002b01ce003400b3
002702510024025a0024015bffbe02510024025100240277003702770043
0360005500780000025a0014025a0014028e002d03d6002d0364002b01f4
000003e800000188002f0188002400d7002f00d700240251002402510024
01c3000b0230000c006fff4502510024017800370178004301e8000701e8
00070220003a0120005000d700240188002404000026025a00140206003e
025a00140206003e0206003e00cf003e00cfffee00cfffe300cfffcf028e
002d028e002d02510024028e002d0262003a0262003a0262003a00c6003c
021c0091021c007d021c008d021c0073021c00dd021c00ae021c0082021c
007b021c00b3021c008801dffffb00fafffc0232003201c7003102140027
01c1001d02510024027e000a020e002b0230000c0223003e020c003c0251
002402510024025100240251002402510024025100240251002401f40000
000000000000007c0000007c0000007c0000007c0000007c0000007c0000
007c0000007c0000007c0000007c0000007c0000007c0000007c0000007c
0000007c0000007c0000007c000000d2000000d20000017e0000017e0000
023400000234000002ce0000039200000392000003920000039200000392
0000040a0000040a0000040a0000040a0000040a0000040a0000040a0000
048a0000048a00000546000005de000005de000005de0000069e0000072e
0000072e0000072e000007b600000820000008ae000008ae000008ae0000
08ae000008ae000008ae0000098800000a0000000a9200000a9200000a92
00000a9200000a9200000a9200000a9200000a9200000a9200000a920000
0aea00000aea00000bdc00000c9a00000d5600000e1000000ede00000f98
000010ae00001144000011be00001266000012ec00001344000014140000
14ac0000154000001606000016060000169c0000178200001838000018d2
000018d2000018d200001952000019ec000019ec000019ec000019ec0000
19ec000019ec000019ec000019ec000019ec000019ec000019ec000019ec
000019ec000019ec000019ec000019ec000019ec000019ec000019ec0000
19ec000019ec000019ec000019ec000019ec000019ec000019ec000019ec
000019ec000019ec000019ec000019ec000019ec000019ec000019ec0000
19ec000019ec000019ec000019ec000019ec000019ec000019ec000019ec
000019ec000019ec000019ec000019ec000019ec000019ec000019ec0000
19ec000019ec000019ec000019ec000019ec000019ec000019ec000019ec
000019ec000019ec000019ec000019ec000019ec000019ec000019ec0000
19ec000019ec000019ec000019ec000019ec000019ec000019ec000019ec
000019ec000019ec000019ec000019ec000019ec000019ec000019ec0000
19ec000019ec000019ec000019ec000019ec000019ec000019ec000019ec
000019ec000019ec000019ec000019ec00001a6c00001a6c00001a6c0000
1a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c
00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c0000
1a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c
00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c0000
1a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c
00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c0000
1a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c
00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c00001a6c0001
000000f600640007004e0004000200080040000a0000005600a100020001
0000001d01620000000000000000003600090000000000000001002c003f
0000000000000002000e006b000000000000000300640079000000000000
0004002c00dd0000000000000005004801090000000000000006002c0151
0001000000000000001b017d000100000000000100160198000100000000
0002000701ae0001000000000003003201b50001000000000004001601e7
0001000000000005002401fd000100000000000600160221000100000000
0100000c023700010000000001010009024300010000000001020009024c
00010000000001030009025500010000000001040009025e000100000000
010500090267000100000000010600090270000100000000010700090000
0003000104090000003602790003000104090001002c02af000300010409
0002000e02db0003000104090003006402e90003000104090004002c034d
0003000104090005004803790003000104090006002c03c1494e56495349
424c4500a90031003900390033002000540068006500200046006f006e00
740020004200750072006500610075002c00200049006e0063002e004200
75007200650061007500470072006f007400650073007100750065004600
6900760065004f006e00650052006500670075006c00610072004d006100
630072006f006d006500640069006100200046006f006e0074006f006700
720061007000680065007200200034002e00310020004200750072006500
61007500470072006f007400650073007100750065004600690076006500
4f006e006500420075007200650061007500470072006f00740065007300
71007500650046006900760065004f006e0065004d006100630072006f00
6d006500640069006100200046006f006e0074006f006700720061007000
680065007200200034002e0031002000320039002f00310030002f003900
3800420075007200650061007500470072006f0074006500730071007500
650046006900760065004f006e0065a9313939332054686520466f6e7420
4275726561752c20496e632e42757265617547726f746573717565466976
654f6e65526567756c61724d6163726f6d6564696120466f6e746f677261
7068657220342e312042757265617547726f746573717565466976654f6e
6542757265617547726f746573717565466976654f6e654d6163726f6d65
64696120466f6e746f6772617068657220342e312032392f31302f393842
757265617547726f746573717565466976654f6e65416c6c204665617475
7265734e6f204368616e6765494e56495349424c45494e56495349424c45
494e56495349424c45494e56495349424c45494e56495349424c4500a900
31003900390033002000540068006500200046006f006e00740020004200
750072006500610075002c00200049006e0063002e004200750072006500
61007500470072006f007400650073007100750065004600690076006500
4f006e00650052006500670075006c00610072004d006100630072006f00
6d006500640069006100200046006f006e0074006f006700720061007000
680065007200200034002e00310020004200750072006500610075004700
72006f0074006500730071007500650046006900760065004f006e006500
420075007200650061007500470072006f00740065007300710075006500
46006900760065004f006e0065004d006100630072006f006d0065006400
69006100200046006f006e0074006f006700720061007000680065007200
200034002e0031002000320039002f00310030002f003900380042007500
7200650061007500470072006f0074006500730071007500650046006900
760065004f006e00650040090303020201010000018db801ff8545684445
6844456844456844b10404456844b1050545684400>
[6765 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 124 17 <00010046000000bd007e0003003f40130104044005000300040201030201
0000010146762f3718003f3c2f3c012f3cfd3c003130014968b900010004
496861b0405258381137b90004ffc0385933233533bd77777e00>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 210 19 <0002002cfff401d9030c000f001f00474019012020402100180408100400
14050c1c05040c020400010846762f3718003f3f10fd10fd012ffd2ffd00
3130014968b900080020496861b0405258381137b90020ffc03859011407
062322272635343736333217160734272623220706151417163332373601
d92b347876332d2d31787a312c54141d52511d15121c55551d11015eab57
686356b1e1626b6a61c9a1476767499f9a4065663f00>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 564 23 <00020024000001dd0300000a000d0065402b010e0e400f000c0d0a060500
0c0b0403030409080203010d0b0a03090505040103000807020302000105
46762f3718003f3c3f3c2f173cfd173c012f173cfd173c2e2e2e2e2e002e
3130014968b90005000e496861b0405258381137b9000effc03859252315
233521351333113323110301dd5e51fef6ef6c5eafcab8b8b85701f1fe00
01a2fe5e>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 1034 36 <000200140000024603000007000a004e401c010b0b400c00090a0805000a
08050302070602050401030000010546762f3718003f173c3f3c2f3cfd3c
012e2e2e2e002e3130014968b90005000b496861b0405258381137b9000b
ffc038592123272107231333130b0102465836fedd324fd67b438280bcbc
0300fdff01c2fe3e>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 1162 38 <0001002dfff40236030c00220053401f01232340240e221110131122040e
001a040817050c1e05040c020400010846762f3718003f3f10fd10fd012f
fd2f3cfd2e2e002e2e2e3130014968b900080023496861b0405258381137
b90023ffc038590106070623222726353437363332151407233635342726
23220615141716333237363702340334387a8e464a4a4589f10256022629
4865602d306b5b20140401098c4247575dcad8655dea121311104b2e31a0
aea34c513e297000>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 1838 46 <0001003e0000022b0300000a00564022010b0b400c0007020a0900070603
0302040504090806030502040301030000010446762f3718003f173c3f17
3c012f3cfd173c2e2e2e002e2e3130014968b90004000b496861b0405258
381137b9000bffc038592123011123113311013301022b6bfed05252011b
60fec60157fea90300feac0154fe8a00>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 1974 47 <0001003e000001aa03000005004b401a0106064007000500040304020105
040500030202010000010146762f3718003f3c3f3c10fd3c012f3cfd3c2e
2e003130014968b900010006496861b0405258381137b90006ffc0385929
011133112101aafe9452011a0300fd46>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 2560 56 <0001003afff40228030000130050401e01141440150012110413000b0a04
09080d050413120a0309020400010846762f3718003f3f173c10fd012f3c
fd3c2f3cfd3c003130014968b900080014496861b0405258381137b90014
ffc03859251407062322272635113311143332373635113302282c378e8e
3a3552ab58281f52fa843a483f3b8a0208fdd19633273e022d00>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 2706 66 <00010000ff3901f4ff7e0003003d40110104044005000302010003020100
010146762f3718002f3c2f3c012e2e2e2e003130014968b9000100044968
61b0405258381137b90004ffc038590521352101f4fe0c01f4c74500>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 3600 72 <0002002bfff401cb0250001c0024005c40240125254026000b0e001d090b
041b24030415030205241d21051907051119011100011546762f3718003f
3f10fd10fd2f3cfd3c012ffd3c2ffd3c3c2e2e002e3130014968b9001500
25496861b0405258381137b90025ffc03859011407211417163332373427
1716070e01232227263534373633321716273427262322061501cb01feb2
16215c6803014d030205635974323538346db60f02520311623f48013819
0c672e456c080f080e17495242439eaa4a45e31e0526167c6256>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 4932 80 <0001003c000002c702480021006e40300122224023001c17171613031204
15140a02010421000908040b0a0e05051a1f1a0116150114130a09010500
00011446762f3718003f173c3f3c3f3c10fd3c012f3cfd3cdd3cfd3c10dd
3cfd173c002e2e3130014968b900140022496861b0405258381137b90022
ffc038592123113426232206151123113426232207061511231133153e01
3332173e0133321502c74d2e35353a4d2e36341e1c4d4d0e4b306e1e0f54
30960175503c6349feab0175503c343048feab023e572f32692f3abe>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 5292 82 <0002002bfff401e50250000f001700474019011818401900100400140408
12050c1605040c010400010846762f3718003f3f10fd10fd012ffd2ffd00
3130014968b900080018496861b0405258381137b90018ffc03859011407
06232227263534373633321716073423221514333201e5403a63633a4040
3a63633a404e8f8f8f8f0122994e47474e99994f46464f99eaeae800>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 5440 83 <0002003cff4c01e1024a00140021005d40260122224023000d081c0d0c09
0408040b0a1504001905111e05040a0911010c0b010400010a46762f3718
003f3f3c3f2f3c10fd10fd012ffd2f3cfd173c002e2e3130014968b9000a
0022496861b0405258381137b90022ffc038590114070623222726271523
113315363736333217160734272623220615143332373601e14235533528
220e4e4e0f2724305c353c51201e454043843f1f240112964b3d1a1721fa
02f25d321c1b4650a08336337b67e02c3400>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 5788 86 <00010031fff4019e02500030005940220131314032002006160d07002909
0404242220041d2605190b050219010200010446762f3718003f3f10fd10
fd012ffd3c3c2ffd3c2e2e2e2e002e2e3130014968b900040031496861b0
405258381137b90031ffc038592514232235343717061514333235342726
2f012627263534363332171615140f0134373627262322061514161f0116
1716019ebbb20d440765761a15463e361a1d574d52302d024e0101010656
2f33272f44461e24adb9882225081e0f59642716111a17141e233a4e5b28
253d13080a030f0b084930292026121a1b1e2500>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
1 0 0 <0002003f000001b603200003000700564020010808400902070404010006
0504030205040500070605010201030000010046762f3718003f3c2f3c10
fd3c10fd3c012f3cfd3c2f3cfd3c003130014968b900000008496861b040
5258381137b90008ffc0385933112111253311233f0177fec7fafa0320fc
e03f02a3>GFNBAA+BureauGrotesqueFiveOne AddT42Char 
GFNBAA+BureauGrotesqueFiveOne /CharStrings get begin
/period 17 def
/zero 19 def
/four 23 def
/A 36 def
/C 38 def
/K 46 def
/L 47 def
/U 56 def
/underscore 66 def
/e 72 def
/m 80 def
/o 82 def
/p 83 def
/s 86 def
end
GFNBAA+BureauGrotesqueFiveOne /Encoding get
dup 46 /period put
dup 48 /zero put
dup 52 /four put
dup 65 /A put
dup 67 /C put
dup 75 /K put
dup 76 /L put
dup 85 /U put
dup 95 /underscore put
dup 101 /e put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 115 /s put
pop
end
%ADOEndSubsetFont
reset_gvm
/CCKEOX+BureauGrotesqueFiveOne /GFNBAA+BureauGrotesqueFiveOne findfont ct_VMDictPut
/CCKEOX+BureauGrotesqueFiveOne*1 
[46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four 12{/.notdef}rp /A 
/.notdef /C 7{/.notdef}rp /K /L 8{/.notdef}rp /U 9{/.notdef}rp 
/underscore 5{/.notdef}rp /e 7{/.notdef}rp /m /.notdef /o /p 
2{/.notdef}rp /s 140{/.notdef}rp]
CCKEOX+BureauGrotesqueFiveOne nf
CCKEOX+BureauGrotesqueFiveOne*1 [8.5 0 0 -8.5 0 0 ]msf
388.39 152.788 mo
(KCL_UoL_A4_40mm.eps)
[4.34348 5.28696 3.90149 4.25 5.185 4.48801 3.90149 4.25 5.11703 4.25 4.25 4.25 
4.3945 6.52805 6.52805 2.20151 4.31796 4.45401 0 ]xsh
400.138 21.208 mo
400.138 20.587 399.896 19.994 399.088 19.698 cv
398.413 19.455 397.793 19.374 397.119 19.267 cv
396.148 19.105 396.337 18.161 397.199 18.161 cv
397.766 18.161 400.462 18.377 403.671 18.377 cv
405.531 18.377 408.2 18.296 409.494 18.215 cv
410.303 18.161 410.384 19.024 409.818 19.185 cv
409.252 19.347 406.582 19.994 401.81 24.362 cv
396.876 28.892 390.513 35.606 390.513 35.606 cv
390.513 35.606 404.803 52.646 407.31 54.668 cv
409.899 56.771 411.679 56.933 413.619 57.094 cv
414.105 57.121 414.266 58.065 413.619 58.065 cv
402.458 58.065 li
402.458 58.065 388.626 41.349 386.361 39.812 cv
385.957 39.569 384.986 39.245 384.905 40.378 cv
384.824 41.429 384.743 50.3 384.986 52.241 cv
385.228 54.182 386.037 57.013 390.648 57.013 cv
391.214 57.013 391.537 58.092 390.729 58.065 cv
388.006 57.93 385.957 57.93 382.586 57.93 cv
379.674 57.93 375.603 58.065 375.036 58.065 cv
374.067 58.065 374.067 57.175 374.956 57.094 cv
376.25 57.013 379.324 56.852 379.513 51.918 cv
379.728 46.822 379.593 25.36 379.513 23.014 cv
379.486 21.397 378.11 19.212 374.552 19.212 cv
373.986 19.212 374.067 18.242 374.713 18.242 cv
389.919 18.242 li
390.486 18.242 390.81 19.185 389.839 19.267 cv
388.868 19.347 385.175 19.455 385.067 24.389 cv
384.932 29.323 384.932 36.98 384.932 37.304 cv
384.932 37.709 385.094 38.113 385.66 37.709 cv
387.412 36.523 392.616 31.426 396.499 27.059 cv
398.035 25.333 399.088 23.823 399.815 22.421 cv
399.977 22.125 400.138 21.693 400.138 21.208 cv
419.282 34.878 mo
419.282 21.154 li
419.282 19.455 420.495 18.97 421.789 18.889 cv
422.275 18.889 422.355 18.242 421.708 18.242 cv
413.619 18.242 li
413.053 18.242 412.973 18.862 413.539 18.889 cv
414.752 19.024 416.208 19.617 416.208 21.154 cv
416.208 34.878 li
416.208 36.414 415.642 37.385 413.862 37.385 cv
413.161 37.385 413.323 37.978 413.862 37.978 cv
421.789 37.978 li
422.194 37.978 422.302 37.385 421.627 37.385 cv
419.929 37.385 419.282 36.253 419.282 34.878 cv
429.717 46.741 mo
429.878 46.741 429.985 46.66 430.039 46.498 cv
431.334 42.373 li
431.415 42.13 431.307 41.968 431.091 41.968 cv
431.011 41.968 430.902 41.995 430.822 42.076 cv
430.578 42.319 430.283 42.562 430.039 42.562 cv
429.905 42.562 429.797 42.481 429.662 42.373 cv
428.503 40.944 426.642 40.728 425.753 40.728 cv
421.627 40.728 418.069 43.424 415.966 46.741 cv
414.698 48.709 414.051 50.866 414.051 52.996 cv
414.051 56.394 416.397 58.308 419.47 58.308 cv
420.845 58.308 421.897 58.146 423.757 57.364 cv
424.162 57.202 424.62 57.013 424.89 57.013 cv
425.348 57.013 425.375 57.687 425.429 58.308 cv
425.429 58.55 425.591 58.631 425.753 58.631 cv
425.861 58.631 425.995 58.577 426.076 58.389 cv
427.802 53.454 li
427.937 53.05 427.775 52.888 427.613 52.888 cv
427.37 52.888 427.236 52.996 427.047 53.319 cv
426.265 54.533 425.725 55.315 423.003 56.636 cv
421.87 57.175 420.549 57.499 419.497 57.499 cv
417.206 57.499 416.316 55.746 416.316 53.535 cv
416.316 50.623 417.691 47.577 419.794 45.043 cv
421.142 43.371 423.192 41.483 425.591 41.483 cv
427.883 41.483 429.582 43.182 429.339 46.336 cv
429.312 46.606 429.5 46.741 429.717 46.741 cv
424.485 18.242 mo
423.919 18.242 423.919 18.808 424.243 18.889 cv
424.863 19.024 426.158 19.132 426.158 20.83 cv
426.184 24.847 426.184 30.105 426.023 34.393 cv
425.995 35.929 425.536 37.223 424.216 37.385 cv
423.731 37.412 423.731 37.978 424.054 37.978 cv
429.878 37.978 li
430.201 37.978 430.309 37.466 429.905 37.385 cv
429.015 37.223 427.559 37.223 427.452 34.393 cv
427.316 31.642 427.236 21.235 427.236 21.235 cv
441.844 37.493 li
443.058 37.493 li
443.058 37.493 443.058 22.286 443.138 21.127 cv
443.219 19.779 443.678 19.051 445.134 18.943 cv
445.862 18.889 445.727 18.242 445.241 18.242 cv
439.31 18.242 li
438.609 18.242 438.771 18.889 439.094 18.889 cv
439.741 18.97 441.763 19.212 441.844 21.154 cv
441.925 23.985 442.06 32.802 442.06 32.802 cv
429.069 18.242 li
cp
437.476 45.123 mo
440.065 45.123 440.55 47.388 440.55 49.491 cv
440.55 52.835 437.476 58.173 433.761 58.173 cv
431.415 58.173 430.525 56.286 430.525 54.344 cv
430.525 49.68 433.841 45.123 437.476 45.123 cv
438.016 45.878 mo
435.457 45.878 431.792 51.945 431.792 55.638 cv
431.792 56.609 432.223 57.337 433.248 57.337 cv
435.754 57.337 439.499 51.136 439.499 47.874 cv
439.499 46.903 439.229 45.878 438.016 45.878 cv
447.614 41.834 mo
447.614 41.915 447.587 42.076 447.507 42.238 cv
445.323 46.983 443.165 51.702 441.062 56.447 cv
440.954 56.69 440.739 57.175 440.739 57.499 cv
440.739 57.903 441.035 58.253 441.467 58.253 cv
441.682 58.253 441.979 58.173 442.141 58.092 cv
443.327 57.607 444.568 56.313 445.295 55.207 cv
445.457 54.964 445.161 54.749 444.972 54.911 cv
444.676 55.18 443.839 56.313 442.949 56.798 cv
442.788 56.878 442.626 56.878 442.734 56.555 cv
449.474 41.591 li
449.582 41.322 449.637 41.16 449.637 40.998 cv
449.637 40.809 449.501 40.728 449.312 40.728 cv
448.989 40.728 448.611 40.809 448.127 40.863 cv
447.722 40.89 447.021 40.944 446.401 40.998 cv
446.239 40.998 446.158 41.16 446.158 41.268 cv
446.158 41.429 446.293 41.51 446.454 41.51 cv
446.779 41.51 447.102 41.51 447.452 41.591 cv
447.587 41.645 447.614 41.726 447.614 41.834 cv
465.463 31.507 mo
465.463 29.862 466.677 29.701 467.728 29.62 cv
468.132 29.566 468.213 28.919 467.647 28.919 cv
459.477 28.919 li
458.911 28.919 458.911 29.647 459.477 29.701 cv
461.095 29.808 462.39 30.105 462.39 31.669 cv
462.39 34.608 li
462.39 35.255 462.066 35.713 461.715 35.983 cv
460.286 37.169 458.48 37.25 457.428 37.25 cv
452.252 37.25 449.933 32.775 449.933 28.326 cv
449.933 24.712 451.766 19.024 457.752 19.024 cv
463.117 19.024 465.059 22.502 465.706 23.823 cv
465.922 24.228 466.434 24.147 466.434 23.823 cv
466.434 19.536 li
466.434 19.132 465.84 19.051 465.706 19.536 cv
465.598 20.021 465.275 20.345 464.87 20.345 cv
464.546 20.345 464.169 20.102 464.008 19.994 cv
462.39 18.97 460.852 18.161 457.779 18.161 cv
452.818 18.161 446.698 20.641 446.698 28.191 cv
446.698 35.794 452.44 38.14 457.455 38.14 cv
462.39 38.14 464.978 35.632 465.463 35.309 cv
cp
453.627 41.834 mo
453.627 41.915 453.599 42.076 453.519 42.238 cv
451.335 46.983 449.178 51.702 447.075 56.447 cv
446.967 56.69 446.751 57.175 446.751 57.499 cv
446.751 57.903 447.048 58.253 447.48 58.253 cv
447.695 58.253 447.991 58.173 448.154 58.092 cv
449.34 57.607 450.58 56.313 451.308 55.207 cv
451.47 54.964 451.173 54.749 450.984 54.911 cv
450.688 55.18 449.851 56.313 448.962 56.798 cv
448.801 56.878 448.639 56.878 448.747 56.555 cv
455.488 41.591 li
455.595 41.322 455.649 41.16 455.649 40.998 cv
455.649 40.809 455.513 40.728 455.326 40.728 cv
455.002 40.728 454.624 40.809 454.138 40.863 cv
453.734 40.89 453.034 40.944 452.414 40.998 cv
452.252 40.998 452.171 41.16 452.171 41.268 cv
452.171 41.429 452.305 41.51 452.468 41.51 cv
452.791 41.51 453.115 41.51 453.465 41.591 cv
453.599 41.645 453.627 41.726 453.627 41.834 cv
461.5 55.315 mo
460.367 56.798 458.588 58.173 456.377 58.173 cv
454.678 58.173 453.654 56.96 453.654 55.396 cv
453.654 50.569 458.992 45.473 462.551 45.473 cv
463.764 45.473 464.654 45.932 464.654 47.226 cv
464.654 49.113 463.01 50.138 460.044 51.028 cv
459.208 51.271 457.374 51.675 456.485 51.864 cv
456.08 52.51 455.568 53.805 455.568 54.829 cv
455.568 56.205 456.242 57.013 457.509 57.013 cv
458.965 57.013 460.34 55.881 461.095 54.991 cv
461.338 54.749 461.715 55.072 461.5 55.315 cv
459.882 50.3 mo
461.553 49.761 463.091 48.871 463.091 47.388 cv
463.091 46.606 462.713 46.283 461.958 46.283 cv
461.014 46.283 460.098 46.983 459.532 47.549 cv
458.588 48.466 457.671 49.572 456.889 50.974 cv
457.509 50.947 458.749 50.65 459.882 50.3 cv
476.545 46.606 mo
476.868 46.606 477.165 46.444 477.165 45.878 cv
477.165 45.393 476.706 45.231 476.275 45.231 cv
475.79 45.231 475.17 45.366 474.522 45.797 cv
474.361 45.932 473.956 46.121 473.714 45.959 cv
473.202 45.608 472.743 45.366 471.53 45.366 cv
470.317 45.366 468.537 46.094 467.404 47.63 cv
466.595 48.763 466.434 49.572 466.434 50.38 cv
466.434 51.19 466.758 51.783 467 52.106 cv
467.053 52.187 467.08 52.241 467.08 52.322 cv
467.08 52.51 466.839 52.646 466.434 52.753 cv
465.706 52.996 464.492 53.697 464.492 54.938 cv
464.492 55.746 465.139 56.528 465.867 57.013 cv
465.867 57.013 464.385 57.418 463.198 58.065 cv
462.281 58.577 461.257 59.359 461.257 60.491 cv
461.257 61.785 462.363 63.889 466.919 63.889 cv
469.588 63.889 471.261 62.919 471.908 62.19 cv
472.392 61.624 472.473 60.977 472.473 60.573 cv
472.473 59.116 470.856 57.741 469.077 56.771 cv
467.943 56.124 466.272 55.341 466.272 54.182 cv
466.272 53.886 466.353 53.563 466.677 53.374 cv
466.892 53.211 467.242 53.131 467.62 53.131 cv
468.132 53.131 468.78 53.293 469.238 53.293 cv
470.694 53.293 472.662 52.808 473.876 50.218 cv
474.198 49.491 474.334 48.763 474.334 48.143 cv
474.334 47.334 474.198 47.145 474.198 46.768 cv
474.198 46.444 474.522 46.256 475.143 46.256 cv
476.033 46.256 476.033 46.606 476.545 46.606 cv
467.135 63.107 mo
464.142 63.107 463.252 61.381 463.252 60.518 cv
463.252 59.71 463.576 59.197 464.385 58.631 cv
464.951 58.227 465.786 57.822 466.434 57.58 cv
467.162 57.903 468.267 58.55 468.618 58.874 cv
470.236 60.006 470.559 60.653 470.559 61.219 cv
470.559 62.756 468.267 63.107 467.135 63.107 cv
473.04 47.091 mo
473.04 47.874 472.743 48.925 472.069 50.057 cv
470.802 52.106 469.804 52.51 468.942 52.51 cv
468.213 52.51 467.89 51.918 467.89 51.055 cv
467.89 50.3 468.213 49.329 468.78 48.439 cv
469.642 47.064 470.856 45.932 471.934 45.932 cv
472.662 45.932 473.04 46.283 473.04 47.091 cv
469.804 21.315 mo
469.103 21.315 468.294 20.884 468.294 19.752 cv
468.294 18.538 469.265 18.161 469.993 18.161 cv
471.017 18.161 471.853 18.889 471.853 20.156 cv
471.853 21.558 470.802 23.23 468.942 23.23 cv
468.753 23.23 468.671 23.095 468.671 22.987 cv
468.671 22.853 468.753 22.772 468.861 22.745 cv
470.128 22.502 470.613 21.693 470.64 21.154 cv
470.532 21.235 470.155 21.315 469.804 21.315 cv
484.715 22.205 mo
484.849 22.205 485.011 22.125 484.957 21.936 cv
484.445 18.323 li
484.39 18.08 484.283 17.999 484.148 17.999 cv
484.067 17.999 483.959 18.053 483.879 18.215 cv
483.717 18.538 483.473 18.808 483.015 18.808 cv
482.207 18.808 481.452 18.215 479.538 18.215 cv
477.03 18.215 473.714 19.294 473.714 22.933 cv
473.714 26.573 476.625 27.76 479.133 28.676 cv
481.775 29.647 483.879 30.375 483.879 33.125 cv
483.879 36.199 481.722 37.196 479.672 37.196 cv
477.408 37.196 474.738 36.118 473.794 32.532 cv
473.714 32.235 473.606 32.154 473.39 32.154 cv
473.202 32.154 473.04 32.289 473.04 32.613 cv
473.04 37.223 li
473.04 37.493 473.202 37.628 473.363 37.628 cv
473.471 37.628 473.606 37.547 473.686 37.412 cv
473.876 37.142 474.091 36.899 474.603 36.899 cv
475.628 36.899 476.841 38.14 479.78 38.14 cv
482.368 38.14 486.736 37.331 486.736 32.235 cv
486.736 30.213 485.9 27.625 480.993 26.25 cv
477.515 25.279 476.41 23.823 476.41 22.043 cv
476.41 20.506 477.327 19.024 479.833 19.024 cv
481.074 19.024 483.096 19.374 484.445 22.016 cv
484.526 22.178 484.606 22.205 484.715 22.205 cv
483.312 55.315 mo
482.18 56.798 480.401 58.173 478.162 58.173 cv
476.464 58.173 475.466 56.96 475.466 55.396 cv
475.466 50.569 480.805 45.473 484.364 45.473 cv
485.577 45.473 486.467 45.932 486.467 47.226 cv
486.467 49.113 484.795 50.138 481.856 51.028 cv
480.993 51.271 479.187 51.675 478.297 51.864 cv
477.892 52.51 477.353 53.805 477.353 54.829 cv
477.353 56.205 478.055 57.013 479.295 57.013 cv
480.75 57.013 482.126 55.881 482.908 54.991 cv
483.15 54.749 483.501 55.072 483.312 55.315 cv
481.695 50.3 mo
483.339 49.761 484.876 48.871 484.876 47.388 cv
484.876 46.606 484.526 46.283 483.743 46.283 cv
482.826 46.283 481.884 46.983 481.317 47.549 cv
480.401 48.466 479.456 49.572 478.702 50.974 cv
479.295 50.947 480.562 50.65 481.695 50.3 cv
f
375.953 64.716 mo
382.91 64.716 li
383.26 64.716 383.368 65.282 382.937 65.282 cv
382.263 65.282 380.888 65.606 380.888 67.062 cv
380.888 79.141 li
380.888 80.517 381.561 81.002 384.555 81.002 cv
387.439 81.002 390.162 80.651 391.511 76.822 cv
391.618 76.499 392.131 76.525 392.05 77.011 cv
391.159 81.783 li
376.196 81.783 li
375.684 81.783 375.792 81.164 376.115 81.164 cv
377.086 81.164 378.272 80.705 378.272 78.952 cv
378.272 67.386 li
378.272 65.903 377.409 65.282 375.953 65.282 cv
375.576 65.282 375.549 64.716 375.953 64.716 cv
484.822 87.823 mo
376.197 87.823 li
376.197 88.848 li
484.822 88.848 li
cp
484.822 91.112 mo
376.197 91.112 li
376.197 93.458 li
484.822 93.458 li
cp
401.029 81.919 mo
406.016 81.919 409.603 78.44 409.603 73.101 cv
409.603 68.41 406.124 64.608 401.029 64.608 cv
396.068 64.608 392.509 68.491 392.509 73.101 cv
392.509 78.116 395.879 81.919 401.029 81.919 cv
395.285 73.101 mo
395.285 68.734 397.308 65.364 401.029 65.364 cv
404.345 65.364 406.852 68.572 406.852 73.101 cv
406.852 78.683 404.588 81.136 401.029 81.136 cv
397.55 81.136 395.285 77.793 395.285 73.101 cv
410.815 64.69 mo
410.492 64.69 410.411 65.256 410.843 65.256 cv
411.328 65.256 412.353 65.391 412.353 66.873 cv
412.271 78.844 li
412.271 80.139 411.813 81.217 410.6 81.217 cv
410.196 81.217 410.196 81.756 410.519 81.756 cv
415.507 81.756 li
415.83 81.756 415.83 81.217 415.453 81.217 cv
414.725 81.217 413.458 80.893 413.431 78.844 cv
413.323 66.658 li
413.323 66.658 426.103 81.675 426.184 81.756 cv
427.047 81.756 li
427.127 67.359 li
427.127 65.93 427.748 65.175 429.284 65.175 cv
429.608 65.175 429.608 64.69 429.284 64.69 cv
423.703 64.69 li
423.38 64.69 423.38 65.175 423.703 65.175 cv
424.27 65.175 425.995 65.282 426.023 67.143 cv
426.158 77.631 li
415.183 64.69 li
cp
430.902 64.608 mo
430.336 64.608 430.444 65.256 430.768 65.256 cv
431.415 65.256 432.493 65.579 432.493 66.873 cv
432.493 79.034 li
432.493 80.328 432.197 81.136 430.66 81.136 cv
430.283 81.136 430.283 81.756 430.633 81.756 cv
438.744 81.756 li
442.303 81.756 448.207 80.058 448.207 73.021 cv
448.207 65.903 443.354 64.608 438.662 64.608 cv
cp
435.108 66.982 mo
435.108 65.444 435.996 65.364 438.097 65.364 cv
441.737 65.364 445.403 67.17 445.403 72.94 cv
445.403 78.548 442.329 80.948 438.259 80.948 cv
437.396 80.948 li
436.32 80.948 435.108 80.732 435.108 78.602 cv
cp
459.019 81.919 mo
464.008 81.919 467.593 78.44 467.593 73.101 cv
467.593 68.41 464.116 64.608 459.019 64.608 cv
454.058 64.608 450.499 68.491 450.499 73.101 cv
450.499 78.116 453.87 81.919 459.019 81.919 cv
453.277 73.101 mo
453.277 68.734 455.299 65.364 459.019 65.364 cv
462.335 65.364 464.843 68.572 464.843 73.101 cv
464.843 78.683 462.578 81.136 459.019 81.136 cv
455.541 81.136 453.277 77.793 453.277 73.101 cv
468.698 64.69 mo
468.375 64.69 468.294 65.256 468.726 65.256 cv
469.21 65.256 470.236 65.391 470.236 66.873 cv
470.155 78.844 li
470.155 80.139 469.696 81.217 468.483 81.217 cv
468.078 81.217 468.078 81.756 468.402 81.756 cv
473.39 81.756 li
473.714 81.756 473.714 81.217 473.336 81.217 cv
472.608 81.217 471.341 80.893 471.314 78.844 cv
471.206 66.658 li
471.206 66.658 483.986 81.675 484.067 81.756 cv
484.93 81.756 li
485.011 67.359 li
485.011 65.93 485.631 65.175 487.168 65.175 cv
487.491 65.175 487.491 64.69 487.168 64.69 cv
481.586 64.69 li
481.262 64.69 481.262 65.175 481.586 65.175 cv
482.153 65.175 483.879 65.282 483.905 67.143 cv
484.04 77.631 li
473.066 64.69 li
cp
f
379.135 121.71 mo
376.87 121.71 376.196 120.416 376.196 118.716 cv
376.196 111.491 li
378.327 111.491 li
378.327 119.229 li
378.327 119.634 378.569 119.957 379.135 119.957 cv
379.702 119.957 379.944 119.634 379.944 119.229 cv
379.944 111.491 li
381.993 111.491 li
381.993 118.716 li
381.993 120.334 381.561 121.71 379.135 121.71 cv
386.631 121.548 mo
386.631 116.047 li
386.631 115.724 386.415 115.562 386.091 115.562 cv
385.606 115.562 385.202 116.128 385.202 117.099 cv
385.202 121.548 li
383.233 121.548 li
383.233 113.999 li
385.202 113.999 li
385.202 115.211 li
385.444 114.403 386.091 113.836 386.981 113.836 cv
387.79 113.836 388.518 114.403 388.518 115.616 cv
388.518 121.548 li
cp
389.704 111.491 mo
391.672 111.491 li
391.672 113.351 li
389.704 113.351 li
cp
389.704 113.351 mo
389.704 113.999 mo
391.672 113.999 li
391.672 121.548 li
389.704 121.548 li
cp
389.704 121.548 mo
394.396 121.548 mo
392.293 113.999 li
394.423 113.999 li
395.474 118.96 li
396.337 113.999 li
398.251 113.999 li
396.31 121.548 li
cp
403.994 118.232 mo
403.967 117.747 403.913 117.315 403.832 116.748 cv
403.671 114.888 402.996 113.755 401.298 113.755 cv
399.518 113.755 398.521 114.969 398.521 117.908 cv
398.521 121.063 399.68 121.71 401.459 121.71 cv
403.32 121.71 403.913 120.658 403.913 119.364 cv
403.913 118.797 li
402.188 118.797 li
402.188 119.31 li
402.188 119.957 402.026 120.28 401.459 120.28 cv
400.893 120.28 400.489 119.849 400.489 118.232 cv
cp
402.053 117.153 mo
400.489 117.153 li
400.57 115.94 400.732 115.158 401.298 115.158 cv
401.837 115.158 401.891 115.697 402.026 116.91 cv
cp
409.764 117.396 mo
408.2 117.747 li
408.281 117.477 408.281 117.045 408.281 116.641 cv
408.281 115.913 408.066 115.589 407.661 115.589 cv
407.041 115.589 406.879 116.668 406.879 117.747 cv
406.879 121.548 li
404.911 121.548 li
404.911 113.999 li
406.798 113.999 li
406.798 113.999 406.879 114.888 406.879 115.374 cv
406.96 115.13 li
407.121 114.483 407.688 113.836 408.416 113.836 cv
409.468 113.836 409.845 114.483 409.845 115.778 cv
409.845 116.506 409.845 116.991 409.764 117.396 cv
413.026 121.71 mo
411.247 121.71 410.519 121.063 410.519 119.768 cv
410.519 119.445 410.6 119.121 410.681 118.878 cv
412.164 118.96 li
412.083 119.121 412.083 119.391 412.083 119.553 cv
412.083 120.119 412.38 120.442 412.945 120.442 cv
413.619 120.442 413.755 119.957 413.755 119.634 cv
413.755 119.121 413.458 118.771 412.892 118.555 cv
412.083 118.232 li
411.409 117.962 410.519 117.396 410.519 115.94 cv
410.519 114.565 411.651 113.755 413.107 113.755 cv
414.482 113.755 415.48 114.322 415.48 115.616 cv
415.48 115.94 415.48 116.102 415.399 116.345 cv
413.943 116.263 li
413.97 116.102 414.024 115.913 414.024 115.67 cv
414.024 115.158 413.674 114.996 413.269 114.996 cv
412.811 114.996 412.541 115.319 412.541 115.751 cv
412.541 116.236 412.838 116.506 413.404 116.748 cv
414.375 117.153 li
415.264 117.558 415.885 117.989 415.885 119.283 cv
415.885 120.901 415.211 121.71 413.026 121.71 cv
416.693 111.491 mo
418.661 111.491 li
418.661 113.351 li
416.693 113.351 li
cp
416.693 113.351 mo
416.693 113.999 mo
418.661 113.999 li
418.661 121.548 li
416.693 121.548 li
cp
416.693 121.548 mo
422.086 121.629 mo
421.034 121.629 420.441 121.306 420.441 120.011 cv
420.441 115.374 li
419.309 115.374 li
419.309 113.999 li
420.441 113.999 li
420.522 111.976 li
422.328 111.976 li
422.328 113.999 li
423.946 113.999 li
423.946 115.374 li
422.328 115.374 li
422.328 119.283 li
422.328 119.849 422.652 120.065 423.192 120.065 cv
423.515 120.065 423.784 119.984 424.027 119.903 cv
424.027 121.225 li
423.784 121.386 422.894 121.629 422.086 121.629 cv
426.292 123.893 mo
424.836 123.893 424.512 123.247 424.512 122.357 cv
424.512 121.791 li
425.806 121.791 li
425.806 122.276 li
425.806 122.599 425.887 122.761 426.292 122.761 cv
426.777 122.761 426.993 122.357 426.993 121.791 cv
426.993 121.548 426.831 121.225 426.75 120.982 cv
424.485 113.999 li
426.723 113.999 li
427.829 118.744 li
428.691 113.999 li
430.633 113.999 li
428.583 121.629 li
428.206 123.085 427.964 123.893 426.292 123.893 cv
439.768 117.747 mo
439.768 115.13 439.175 113.755 437.073 113.755 cv
435.216 113.755 434.381 115.05 434.381 117.908 cv
434.381 120.577 435.054 121.71 437.154 121.71 cv
439.337 121.71 439.768 120.334 439.768 117.747 cv
437.773 117.908 mo
437.773 119.768 437.557 120.227 437.073 120.227 cv
436.588 120.227 436.372 119.849 436.372 117.908 cv
436.372 115.859 436.508 115.185 437.073 115.185 cv
437.638 115.185 437.773 115.778 437.773 117.908 cv
445.053 113.513 mo
443.92 113.433 li
443.92 112.866 li
443.92 112.624 443.866 112.381 443.543 112.381 cv
443.3 112.381 443.058 112.705 443.058 113.351 cv
443.058 114.052 li
444.756 114.052 li
444.756 115.319 li
443.138 115.319 li
443.138 121.548 li
441.251 121.548 li
441.251 115.319 li
440.2 115.319 li
440.2 114.052 li
441.251 114.052 li
441.251 113.271 li
441.251 112.057 442.006 111.329 443.3 111.329 cv
444.676 111.329 445.134 111.815 445.134 112.785 cv
445.134 113.028 445.134 113.271 445.053 113.513 cv
448.962 121.548 mo
448.962 111.491 li
451.092 111.491 li
451.092 119.607 li
453.599 119.607 li
453.599 121.548 li
cp
459.532 117.747 mo
459.532 115.13 458.938 113.755 456.835 113.755 cv
454.975 113.755 454.138 115.05 454.138 117.908 cv
454.138 120.577 454.813 121.71 456.917 121.71 cv
459.1 121.71 459.532 120.334 459.532 117.747 cv
457.536 117.908 mo
457.536 119.768 457.321 120.227 456.835 120.227 cv
456.35 120.227 456.134 119.849 456.134 117.908 cv
456.134 115.859 456.269 115.185 456.835 115.185 cv
457.401 115.185 457.536 115.778 457.536 117.908 cv
463.899 121.548 mo
463.899 116.047 li
463.899 115.724 463.684 115.562 463.36 115.562 cv
462.875 115.562 462.47 116.128 462.47 117.099 cv
462.47 121.548 li
460.502 121.548 li
460.502 113.999 li
462.47 113.999 li
462.47 115.211 li
462.713 114.403 463.36 113.836 464.249 113.836 cv
465.059 113.836 465.786 114.403 465.786 115.616 cv
465.786 121.548 li
cp
472.177 121.548 mo
472.177 111.491 li
470.209 111.491 li
470.209 114.808 li
470.128 114.673 li
469.804 114.106 469.427 113.836 468.861 113.836 cv
467.404 113.836 466.649 115.211 466.649 117.827 cv
466.649 120.901 467.512 121.683 468.753 121.683 cv
469.427 121.683 469.885 121.332 470.182 120.874 cv
470.37 120.577 li
470.37 121.548 li
cp
470.209 117.827 mo
470.209 119.607 469.912 120.308 469.427 120.308 cv
468.969 120.308 468.618 119.849 468.618 117.827 cv
468.618 116.021 468.942 115.266 469.346 115.266 cv
469.67 115.266 469.858 115.508 469.966 115.832 cv
470.101 116.236 470.209 116.83 470.209 117.827 cv
478.54 117.747 mo
478.54 115.13 477.947 113.755 475.844 113.755 cv
473.983 113.755 473.147 115.05 473.147 117.908 cv
473.147 120.577 473.822 121.71 475.924 121.71 cv
478.108 121.71 478.54 120.334 478.54 117.747 cv
476.545 117.908 mo
476.545 119.768 476.329 120.227 475.844 120.227 cv
475.358 120.227 475.143 119.849 475.143 117.908 cv
475.143 115.859 475.277 115.185 475.844 115.185 cv
476.41 115.185 476.545 115.778 476.545 117.908 cv
482.935 121.548 mo
482.935 116.047 li
482.935 115.724 482.719 115.562 482.395 115.562 cv
481.91 115.562 481.506 116.128 481.506 117.099 cv
481.506 121.548 li
479.538 121.548 li
479.538 113.999 li
481.506 113.999 li
481.506 115.211 li
481.749 114.403 482.395 113.836 483.285 113.836 cv
484.094 113.836 484.822 114.403 484.822 115.616 cv
484.822 121.548 li
cp
f
CCKEOX+BureauGrotesqueFiveOne*1 [8.5 0 0 -8.5 0 0 ]msf
397.538 -77.0138 mo
(KCL_A4_40mm.eps)
[4.34348 5.28696 3.90149 4.25 5.11703 4.25 4.25 4.25 4.3945 6.52802 6.52808 2.20151 
4.31796 4.45401 0 ]xsh
400.138 -181.043 mo
400.138 -181.664 399.896 -182.257 399.088 -182.553 cv
398.413 -182.796 397.793 -182.877 397.119 -182.984 cv
396.148 -183.146 396.337 -184.09 397.199 -184.09 cv
397.766 -184.09 400.462 -183.874 403.671 -183.874 cv
405.531 -183.874 408.2 -183.955 409.494 -184.036 cv
410.303 -184.09 410.384 -183.227 409.818 -183.066 cv
409.252 -182.904 406.582 -182.257 401.81 -177.889 cv
396.876 -173.359 390.513 -166.645 390.513 -166.645 cv
390.513 -166.645 404.803 -149.605 407.31 -147.583 cv
409.899 -145.48 411.679 -145.318 413.619 -145.157 cv
414.105 -145.13 414.266 -144.186 413.619 -144.186 cv
402.458 -144.186 li
402.458 -144.186 388.626 -160.902 386.361 -162.439 cv
385.957 -162.682 384.986 -163.006 384.905 -161.873 cv
384.824 -160.822 384.743 -151.951 384.986 -150.01 cv
385.228 -148.069 386.037 -145.238 390.648 -145.238 cv
391.214 -145.238 391.537 -144.159 390.729 -144.186 cv
388.006 -144.321 385.957 -144.321 382.586 -144.321 cv
379.674 -144.321 375.603 -144.186 375.036 -144.186 cv
374.067 -144.186 374.067 -145.076 374.956 -145.157 cv
376.25 -145.238 379.324 -145.399 379.513 -150.333 cv
379.728 -155.429 379.593 -176.891 379.513 -179.237 cv
379.486 -180.854 378.11 -183.039 374.552 -183.039 cv
373.986 -183.039 374.067 -184.009 374.713 -184.009 cv
389.919 -184.009 li
390.486 -184.009 390.81 -183.066 389.839 -182.984 cv
388.868 -182.904 385.175 -182.796 385.067 -177.862 cv
384.932 -172.928 384.932 -165.271 384.932 -164.947 cv
384.932 -164.542 385.094 -164.138 385.66 -164.542 cv
387.412 -165.728 392.616 -170.825 396.499 -175.192 cv
398.035 -176.918 399.088 -178.428 399.815 -179.83 cv
399.977 -180.126 400.138 -180.558 400.138 -181.043 cv
419.282 -167.373 mo
419.282 -181.097 li
419.282 -182.796 420.495 -183.281 421.789 -183.362 cv
422.275 -183.362 422.355 -184.009 421.708 -184.009 cv
413.619 -184.009 li
413.053 -184.009 412.973 -183.389 413.539 -183.362 cv
414.752 -183.227 416.208 -182.634 416.208 -181.097 cv
416.208 -167.373 li
416.208 -165.837 415.642 -164.866 413.862 -164.866 cv
413.161 -164.866 413.323 -164.273 413.862 -164.273 cv
421.789 -164.273 li
422.194 -164.273 422.302 -164.866 421.627 -164.866 cv
419.929 -164.866 419.282 -165.998 419.282 -167.373 cv
429.717 -155.51 mo
429.878 -155.51 429.985 -155.591 430.039 -155.753 cv
431.334 -159.878 li
431.415 -160.121 431.307 -160.283 431.091 -160.283 cv
431.011 -160.283 430.902 -160.256 430.822 -160.175 cv
430.578 -159.932 430.283 -159.689 430.039 -159.689 cv
429.905 -159.689 429.797 -159.77 429.662 -159.878 cv
428.503 -161.307 426.642 -161.523 425.753 -161.523 cv
421.627 -161.523 418.069 -158.827 415.966 -155.51 cv
414.698 -153.542 414.051 -151.385 414.051 -149.255 cv
414.051 -145.857 416.397 -143.943 419.47 -143.943 cv
420.845 -143.943 421.897 -144.105 423.757 -144.887 cv
424.162 -145.049 424.62 -145.238 424.89 -145.238 cv
425.348 -145.238 425.375 -144.564 425.429 -143.943 cv
425.429 -143.701 425.591 -143.62 425.753 -143.62 cv
425.861 -143.62 425.995 -143.674 426.076 -143.862 cv
427.802 -148.797 li
427.937 -149.201 427.775 -149.363 427.613 -149.363 cv
427.37 -149.363 427.236 -149.255 427.047 -148.932 cv
426.265 -147.718 425.725 -146.936 423.003 -145.615 cv
421.87 -145.076 420.549 -144.752 419.497 -144.752 cv
417.206 -144.752 416.316 -146.505 416.316 -148.716 cv
416.316 -151.628 417.691 -154.674 419.794 -157.208 cv
421.142 -158.88 423.192 -160.768 425.591 -160.768 cv
427.883 -160.768 429.582 -159.069 429.339 -155.915 cv
429.312 -155.645 429.5 -155.51 429.717 -155.51 cv
424.485 -184.009 mo
423.919 -184.009 423.919 -183.443 424.243 -183.362 cv
424.863 -183.227 426.158 -183.119 426.158 -181.421 cv
426.184 -177.404 426.184 -172.146 426.023 -167.858 cv
425.995 -166.322 425.536 -165.028 424.216 -164.866 cv
423.731 -164.839 423.731 -164.273 424.054 -164.273 cv
429.878 -164.273 li
430.201 -164.273 430.309 -164.785 429.905 -164.866 cv
429.015 -165.028 427.559 -165.028 427.452 -167.858 cv
427.316 -170.609 427.236 -181.016 427.236 -181.016 cv
441.844 -164.758 li
443.058 -164.758 li
443.058 -164.758 443.058 -179.965 443.138 -181.124 cv
443.219 -182.472 443.678 -183.2 445.134 -183.308 cv
445.862 -183.362 445.727 -184.009 445.241 -184.009 cv
439.31 -184.009 li
438.609 -184.009 438.771 -183.362 439.094 -183.362 cv
439.741 -183.281 441.763 -183.039 441.844 -181.097 cv
441.925 -178.266 442.06 -169.449 442.06 -169.449 cv
429.069 -184.009 li
cp
437.476 -157.128 mo
440.065 -157.128 440.55 -154.863 440.55 -152.76 cv
440.55 -149.416 437.476 -144.078 433.761 -144.078 cv
431.415 -144.078 430.525 -145.965 430.525 -147.907 cv
430.525 -152.571 433.841 -157.128 437.476 -157.128 cv
438.016 -156.373 mo
435.457 -156.373 431.792 -150.306 431.792 -146.613 cv
431.792 -145.642 432.223 -144.914 433.248 -144.914 cv
435.754 -144.914 439.499 -151.115 439.499 -154.377 cv
439.499 -155.348 439.229 -156.373 438.016 -156.373 cv
447.614 -160.417 mo
447.614 -160.336 447.587 -160.175 447.507 -160.013 cv
445.323 -155.268 443.165 -150.549 441.062 -145.804 cv
440.954 -145.561 440.739 -145.076 440.739 -144.752 cv
440.739 -144.348 441.035 -143.998 441.467 -143.998 cv
441.682 -143.998 441.979 -144.078 442.141 -144.159 cv
443.327 -144.644 444.568 -145.938 445.295 -147.044 cv
445.457 -147.287 445.161 -147.502 444.972 -147.34 cv
444.676 -147.071 443.839 -145.938 442.949 -145.453 cv
442.788 -145.373 442.626 -145.373 442.734 -145.696 cv
449.474 -160.66 li
449.582 -160.929 449.637 -161.091 449.637 -161.253 cv
449.637 -161.442 449.501 -161.523 449.312 -161.523 cv
448.989 -161.523 448.611 -161.442 448.127 -161.388 cv
447.722 -161.361 447.021 -161.307 446.401 -161.253 cv
446.239 -161.253 446.158 -161.091 446.158 -160.983 cv
446.158 -160.822 446.293 -160.741 446.454 -160.741 cv
446.779 -160.741 447.102 -160.741 447.452 -160.66 cv
447.587 -160.606 447.614 -160.525 447.614 -160.417 cv
465.463 -170.744 mo
465.463 -172.389 466.677 -172.55 467.728 -172.631 cv
468.132 -172.685 468.213 -173.332 467.647 -173.332 cv
459.477 -173.332 li
458.911 -173.332 458.911 -172.604 459.477 -172.55 cv
461.095 -172.443 462.39 -172.146 462.39 -170.582 cv
462.39 -167.643 li
462.39 -166.996 462.066 -166.538 461.715 -166.268 cv
460.286 -165.082 458.48 -165.001 457.428 -165.001 cv
452.252 -165.001 449.933 -169.476 449.933 -173.925 cv
449.933 -177.539 451.766 -183.227 457.752 -183.227 cv
463.117 -183.227 465.059 -179.749 465.706 -178.428 cv
465.922 -178.023 466.434 -178.104 466.434 -178.428 cv
466.434 -182.715 li
466.434 -183.119 465.84 -183.2 465.706 -182.715 cv
465.598 -182.23 465.275 -181.906 464.87 -181.906 cv
464.546 -181.906 464.169 -182.149 464.008 -182.257 cv
462.39 -183.281 460.852 -184.09 457.779 -184.09 cv
452.818 -184.09 446.698 -181.61 446.698 -174.06 cv
446.698 -166.457 452.44 -164.111 457.455 -164.111 cv
462.39 -164.111 464.978 -166.619 465.463 -166.942 cv
cp
453.627 -160.417 mo
453.627 -160.336 453.599 -160.175 453.519 -160.013 cv
451.335 -155.268 449.178 -150.549 447.075 -145.804 cv
446.967 -145.561 446.751 -145.076 446.751 -144.752 cv
446.751 -144.348 447.048 -143.998 447.48 -143.998 cv
447.695 -143.998 447.991 -144.078 448.154 -144.159 cv
449.34 -144.644 450.58 -145.938 451.308 -147.044 cv
451.47 -147.287 451.173 -147.502 450.984 -147.34 cv
450.688 -147.071 449.851 -145.938 448.962 -145.453 cv
448.801 -145.373 448.639 -145.373 448.747 -145.696 cv
455.488 -160.66 li
455.595 -160.929 455.649 -161.091 455.649 -161.253 cv
455.649 -161.442 455.513 -161.523 455.326 -161.523 cv
455.002 -161.523 454.624 -161.442 454.138 -161.388 cv
453.734 -161.361 453.034 -161.307 452.414 -161.253 cv
452.252 -161.253 452.171 -161.091 452.171 -160.983 cv
452.171 -160.822 452.305 -160.741 452.468 -160.741 cv
452.791 -160.741 453.115 -160.741 453.465 -160.66 cv
453.599 -160.606 453.627 -160.525 453.627 -160.417 cv
461.5 -146.936 mo
460.367 -145.453 458.588 -144.078 456.377 -144.078 cv
454.678 -144.078 453.654 -145.291 453.654 -146.855 cv
453.654 -151.682 458.992 -156.778 462.551 -156.778 cv
463.764 -156.778 464.654 -156.319 464.654 -155.025 cv
464.654 -153.138 463.01 -152.113 460.044 -151.223 cv
459.208 -150.98 457.374 -150.576 456.485 -150.387 cv
456.08 -149.741 455.568 -148.446 455.568 -147.422 cv
455.568 -146.046 456.242 -145.238 457.509 -145.238 cv
458.965 -145.238 460.34 -146.37 461.095 -147.26 cv
461.338 -147.502 461.715 -147.179 461.5 -146.936 cv
459.882 -151.951 mo
461.553 -152.49 463.091 -153.38 463.091 -154.863 cv
463.091 -155.645 462.713 -155.968 461.958 -155.968 cv
461.014 -155.968 460.098 -155.268 459.532 -154.702 cv
458.588 -153.785 457.671 -152.679 456.889 -151.277 cv
457.509 -151.304 458.749 -151.601 459.882 -151.951 cv
476.545 -155.645 mo
476.868 -155.645 477.165 -155.807 477.165 -156.373 cv
477.165 -156.858 476.706 -157.02 476.275 -157.02 cv
475.79 -157.02 475.17 -156.885 474.522 -156.454 cv
474.361 -156.319 473.956 -156.13 473.714 -156.292 cv
473.202 -156.643 472.743 -156.885 471.53 -156.885 cv
470.317 -156.885 468.537 -156.157 467.404 -154.621 cv
466.595 -153.488 466.434 -152.679 466.434 -151.871 cv
466.434 -151.061 466.758 -150.468 467 -150.145 cv
467.053 -150.064 467.08 -150.01 467.08 -149.929 cv
467.08 -149.741 466.839 -149.605 466.434 -149.498 cv
465.706 -149.255 464.492 -148.554 464.492 -147.313 cv
464.492 -146.505 465.139 -145.723 465.867 -145.238 cv
465.867 -145.238 464.385 -144.833 463.198 -144.186 cv
462.281 -143.674 461.257 -142.892 461.257 -141.76 cv
461.257 -140.466 462.363 -138.362 466.919 -138.362 cv
469.588 -138.362 471.261 -139.332 471.908 -140.061 cv
472.392 -140.627 472.473 -141.274 472.473 -141.678 cv
472.473 -143.135 470.856 -144.51 469.077 -145.48 cv
467.943 -146.127 466.272 -146.91 466.272 -148.069 cv
466.272 -148.365 466.353 -148.688 466.677 -148.877 cv
466.892 -149.04 467.242 -149.12 467.62 -149.12 cv
468.132 -149.12 468.78 -148.958 469.238 -148.958 cv
470.694 -148.958 472.662 -149.443 473.876 -152.033 cv
474.198 -152.76 474.334 -153.488 474.334 -154.108 cv
474.334 -154.917 474.198 -155.106 474.198 -155.483 cv
474.198 -155.807 474.522 -155.995 475.143 -155.995 cv
476.033 -155.995 476.033 -155.645 476.545 -155.645 cv
467.135 -139.144 mo
464.142 -139.144 463.252 -140.87 463.252 -141.733 cv
463.252 -142.541 463.576 -143.054 464.385 -143.62 cv
464.951 -144.024 465.786 -144.429 466.434 -144.671 cv
467.162 -144.348 468.267 -143.701 468.618 -143.377 cv
470.236 -142.245 470.559 -141.598 470.559 -141.032 cv
470.559 -139.495 468.267 -139.144 467.135 -139.144 cv
473.04 -155.16 mo
473.04 -154.377 472.743 -153.326 472.069 -152.194 cv
470.802 -150.145 469.804 -149.741 468.942 -149.741 cv
468.213 -149.741 467.89 -150.333 467.89 -151.196 cv
467.89 -151.951 468.213 -152.922 468.78 -153.812 cv
469.642 -155.187 470.856 -156.319 471.934 -156.319 cv
472.662 -156.319 473.04 -155.968 473.04 -155.16 cv
469.804 -180.936 mo
469.103 -180.936 468.294 -181.367 468.294 -182.499 cv
468.294 -183.713 469.265 -184.09 469.993 -184.09 cv
471.017 -184.09 471.853 -183.362 471.853 -182.095 cv
471.853 -180.693 470.802 -179.021 468.942 -179.021 cv
468.753 -179.021 468.671 -179.156 468.671 -179.264 cv
468.671 -179.398 468.753 -179.479 468.861 -179.506 cv
470.128 -179.749 470.613 -180.558 470.64 -181.097 cv
470.532 -181.016 470.155 -180.936 469.804 -180.936 cv
484.715 -180.046 mo
484.849 -180.046 485.011 -180.126 484.957 -180.315 cv
484.445 -183.928 li
484.39 -184.171 484.283 -184.252 484.148 -184.252 cv
484.067 -184.252 483.959 -184.198 483.879 -184.036 cv
483.717 -183.713 483.473 -183.443 483.015 -183.443 cv
482.207 -183.443 481.452 -184.036 479.538 -184.036 cv
477.03 -184.036 473.714 -182.957 473.714 -179.318 cv
473.714 -175.678 476.625 -174.491 479.133 -173.575 cv
481.775 -172.604 483.879 -171.876 483.879 -169.126 cv
483.879 -166.052 481.722 -165.055 479.672 -165.055 cv
477.408 -165.055 474.738 -166.133 473.794 -169.719 cv
473.714 -170.016 473.606 -170.097 473.39 -170.097 cv
473.202 -170.097 473.04 -169.962 473.04 -169.638 cv
473.04 -165.028 li
473.04 -164.758 473.202 -164.623 473.363 -164.623 cv
473.471 -164.623 473.606 -164.704 473.686 -164.839 cv
473.876 -165.109 474.091 -165.352 474.603 -165.352 cv
475.628 -165.352 476.841 -164.111 479.78 -164.111 cv
482.368 -164.111 486.736 -164.92 486.736 -170.016 cv
486.736 -172.038 485.9 -174.626 480.993 -176.001 cv
477.515 -176.972 476.41 -178.428 476.41 -180.208 cv
476.41 -181.745 477.327 -183.227 479.833 -183.227 cv
481.074 -183.227 483.096 -182.877 484.445 -180.235 cv
484.526 -180.073 484.606 -180.046 484.715 -180.046 cv
483.312 -146.936 mo
482.18 -145.453 480.401 -144.078 478.162 -144.078 cv
476.464 -144.078 475.466 -145.291 475.466 -146.855 cv
475.466 -151.682 480.805 -156.778 484.364 -156.778 cv
485.577 -156.778 486.467 -156.319 486.467 -155.025 cv
486.467 -153.138 484.795 -152.113 481.856 -151.223 cv
480.993 -150.98 479.187 -150.576 478.297 -150.387 cv
477.892 -149.741 477.353 -148.446 477.353 -147.422 cv
477.353 -146.046 478.055 -145.238 479.295 -145.238 cv
480.75 -145.238 482.126 -146.37 482.908 -147.26 cv
483.15 -147.502 483.501 -147.179 483.312 -146.936 cv
481.695 -151.951 mo
483.339 -152.49 484.876 -153.38 484.876 -154.863 cv
484.876 -155.645 484.526 -155.968 483.743 -155.968 cv
482.826 -155.968 481.884 -155.268 481.317 -154.702 cv
480.401 -153.785 479.456 -152.679 478.702 -151.277 cv
479.295 -151.304 480.562 -151.601 481.695 -151.951 cv
f
375.953 -137.535 mo
382.91 -137.535 li
383.26 -137.535 383.368 -136.969 382.937 -136.969 cv
382.263 -136.969 380.888 -136.645 380.888 -135.189 cv
380.888 -123.11 li
380.888 -121.734 381.561 -121.249 384.555 -121.249 cv
387.439 -121.249 390.162 -121.6 391.511 -125.429 cv
391.618 -125.752 392.131 -125.726 392.05 -125.24 cv
391.159 -120.468 li
376.196 -120.468 li
375.684 -120.468 375.792 -121.087 376.115 -121.087 cv
377.086 -121.087 378.272 -121.546 378.272 -123.299 cv
378.272 -134.865 li
378.272 -136.348 377.409 -136.969 375.953 -136.969 cv
375.576 -136.969 375.549 -137.535 375.953 -137.535 cv
484.822 -114.428 mo
376.197 -114.428 li
376.197 -113.403 li
484.822 -113.403 li
cp
484.822 -111.139 mo
376.197 -111.139 li
376.197 -108.793 li
484.822 -108.793 li
cp
401.029 -120.332 mo
406.016 -120.332 409.603 -123.811 409.603 -129.15 cv
409.603 -133.841 406.124 -137.643 401.029 -137.643 cv
396.068 -137.643 392.509 -133.76 392.509 -129.15 cv
392.509 -124.135 395.879 -120.332 401.029 -120.332 cv
395.285 -129.15 mo
395.285 -133.517 397.308 -136.887 401.029 -136.887 cv
404.345 -136.887 406.852 -133.679 406.852 -129.15 cv
406.852 -123.568 404.588 -121.115 401.029 -121.115 cv
397.55 -121.115 395.285 -124.458 395.285 -129.15 cv
410.815 -137.561 mo
410.492 -137.561 410.411 -136.995 410.843 -136.995 cv
411.328 -136.995 412.353 -136.86 412.353 -135.378 cv
412.271 -123.407 li
412.271 -122.112 411.813 -121.034 410.6 -121.034 cv
410.196 -121.034 410.196 -120.495 410.519 -120.495 cv
415.507 -120.495 li
415.83 -120.495 415.83 -121.034 415.453 -121.034 cv
414.725 -121.034 413.458 -121.358 413.431 -123.407 cv
413.323 -135.593 li
413.323 -135.593 426.103 -120.576 426.184 -120.495 cv
427.047 -120.495 li
427.127 -134.892 li
427.127 -136.321 427.748 -137.076 429.284 -137.076 cv
429.608 -137.076 429.608 -137.561 429.284 -137.561 cv
423.703 -137.561 li
423.38 -137.561 423.38 -137.076 423.703 -137.076 cv
424.27 -137.076 425.995 -136.969 426.023 -135.108 cv
426.158 -124.62 li
415.183 -137.561 li
cp
430.902 -137.643 mo
430.336 -137.643 430.444 -136.995 430.768 -136.995 cv
431.415 -136.995 432.493 -136.672 432.493 -135.378 cv
432.493 -123.217 li
432.493 -121.923 432.197 -121.115 430.66 -121.115 cv
430.283 -121.115 430.283 -120.495 430.633 -120.495 cv
438.744 -120.495 li
442.303 -120.495 448.207 -122.193 448.207 -129.23 cv
448.207 -136.348 443.354 -137.643 438.662 -137.643 cv
cp
435.108 -135.269 mo
435.108 -136.807 435.996 -136.887 438.097 -136.887 cv
441.737 -136.887 445.403 -135.081 445.403 -129.311 cv
445.403 -123.703 442.329 -121.303 438.259 -121.303 cv
437.396 -121.303 li
436.32 -121.303 435.108 -121.519 435.108 -123.649 cv
cp
459.019 -120.332 mo
464.008 -120.332 467.593 -123.811 467.593 -129.15 cv
467.593 -133.841 464.116 -137.643 459.019 -137.643 cv
454.058 -137.643 450.499 -133.76 450.499 -129.15 cv
450.499 -124.135 453.87 -120.332 459.019 -120.332 cv
453.277 -129.15 mo
453.277 -133.517 455.299 -136.887 459.019 -136.887 cv
462.335 -136.887 464.843 -133.679 464.843 -129.15 cv
464.843 -123.568 462.578 -121.115 459.019 -121.115 cv
455.541 -121.115 453.277 -124.458 453.277 -129.15 cv
468.698 -137.561 mo
468.375 -137.561 468.294 -136.995 468.726 -136.995 cv
469.21 -136.995 470.236 -136.86 470.236 -135.378 cv
470.155 -123.407 li
470.155 -122.112 469.696 -121.034 468.483 -121.034 cv
468.078 -121.034 468.078 -120.495 468.402 -120.495 cv
473.39 -120.495 li
473.714 -120.495 473.714 -121.034 473.336 -121.034 cv
472.608 -121.034 471.341 -121.358 471.314 -123.407 cv
471.206 -135.593 li
471.206 -135.593 483.986 -120.576 484.067 -120.495 cv
484.93 -120.495 li
485.011 -134.892 li
485.011 -136.321 485.631 -137.076 487.168 -137.076 cv
487.491 -137.076 487.491 -137.561 487.168 -137.561 cv
481.586 -137.561 li
481.262 -137.561 481.262 -137.076 481.586 -137.076 cv
482.153 -137.076 483.879 -136.969 483.905 -135.108 cv
484.04 -124.62 li
473.066 -137.561 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
56.693 -218 mo
538.583 -218 li
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
@
CCKEOV+Caslon540LTStd-Roman*1 [24 0 0 -24 0 0 ]msf
56.6929 -229.838 mo
(The logo)
[18.576 12.672 12 6.60001 6.096 11.448 11.52 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: HJCBAA+BureauGrotesqueThreeSeven Initial
ct_T42Dict begin
-0.172 -0.199 1.258 1.137
 256 array 0 1 255 {1 index exch /.notdef put} for  /HJCBAA+BureauGrotesqueThreeSeven
Type42DictBegin
[<00010000000c000c000c000c4f532f3283d040a3000000cc0000004e6376
74205600b6c70000011c000000de6670676d8333c24f000001fc00000014
676c7966efa61f470000105c0000178068656164c80cebda000002100000
00366868656108b304690000024800000024686d7478ccbf16fc0000026c
000003d86c6f63610011846c00000644000003dc6d6178700163017d0000
0a20000000206e616d650e412e0600000a40000005e570726570c503cc0e
0000102800000034676469720000000000000000000000000000019d0190
0005000102bc028a0000008f02bc028a000001c500320103000000000400
00000000000000000000000000000000000000000000416c747300400020
f0020474ff350000047400cb0000fff7024703060310009e00aa00810077
6a19be6e89a8c2e809a6335bd699389e5152c8e12b2064581da6c1906d72
05fd89733e00e0b3aa1b602f1ceff9a96d5b0599c59f736d1ef095b52456
bccd4e7cc51b08b73b45decc726b021684f87db6113284d932279cfeec39
37096b4942b09df3f1d33b2a027e585e91a7e8e42b5e433bb385db675757
d5e2a8692d0481afb44c66b276b2df8326da6930a9799040d39e33ef0d36
5f64bf45869ccbfe7f96e546a3e94581ba2bcfd9557ce05243c437369746
d7469f276fd7e9377d451cc0b3616bf104d9a27621a60002006700004001
002c764520b003254523616818236860442d000100000001000005899dcb
5f0f3cf5000003e800000000b25e53a800000000b25e53a8ff52ff3504ea
0474000000030002000100000000000100000474ff35000004ffff52ff3e
04ea0001000000000000000000000000000000f601f4003f0000000000fe
000000fe000000d0001f01c1002402460024021700190373001302800011
00f3002401490019014900110175002201ac002400e2001b01ac002400e2
002401d2000101f4001a0177001301db001801d5001a01e4001c01cb0019
01e6001a01a2001001c9001601e7001900e6002700e6001e016d002401ac
0024016d0024019400210369002301f2000701f8002d01f30016020b002d
01d2002d01b3002d020600160213002d0104002d01e100090209002d019c
002d02b2002d0207002d01ee001601f0002d01ee001601fe002d01fd0012
01c800070217002b01e3fffd027800000204000001f3000001c4001b0144
002d01d200010144002601da003601fe000001da00640201001401e60026
01ce001401e7001401ce00140167000001c2000201e7002600ea002600ef
ff9b01e5002600ea002602e7002601e7002601cf001401e8002601e60014
01b8002601c000120186000001e7002301cc00000298000001da000001d8
000001ae001a013d000900c50024013d001901bb003901f2000701f20007
01f3001601d2002d0207002d01ee00160217002b02010014020100140201
001402010014020100140201001401ce001401ce001401ce001401ce0014
01ce001400ea002600eaffbb00eaffdd00eaffde01e7002601cf001401cf
001401cf001401cf001401cf001401e7002301e7002301e7002301e70023
01be0016016a003a01ce00140247fffa01e8001101f600190249001401f2
002d02900014029000140210002e01da009401da0052026a000002a60007
01ee0012031a0000031b0000028e0011028e001101fd000a028e0011028e
0011028e0011028e001102900014028e00110184001e0169001b028e0011
02ce001401cf00130194001900d0001f028e0011030700000182ffc1028e
0011028e0011021800240218002402a60024007f000001f2000701f20007
01ee001602a3001602d4001601f4ffff0320000001a6002201a6000f00d4
002200d4000f028e0011028e001101d8000001f3000000ffff52028e0011
012e0024012e002402190000021a000001be001600f8002300d4000f01a6
000f04ff001301f2000701d2002d01f2000701d2002d01d2002d0104002d
0104ffea0104ffea0104ffbd01ee001601ee0016028e001101ee00160217
002b0217002b0217002b00ea002601da005f01da005901da005c01da0048
01da00ab01da007301da006201da004801da007c01da005f019cffcb013e
ffe801fd001201c0001201c4001b01ae001a028e0011020b000001d40014
01f3000001f0002d01e80026028e0011028e0011028e0011028e0011028e
0011028e0011028e001101f40000000000000000007c0000007c0000007c
0000007c0000007c0000007c0000007c0000007c0000007c0000007c0000
007c0000007c0000007c0000007c0000007c0000007c0000007c000000d0
0000012a000001c60000023a000002f2000003b000000446000004f80000
05cc0000065e0000075c0000083c0000083c0000083c0000083c0000083c
0000083c0000083c0000083c000008b8000008b800000974000009740000
09fe000009fe000009fe000009fe000009fe000009fe000009fe000009fe
000009fe000009fe000009fe000009fe000009fe000009fe00000abe0000
0abe00000abe00000abe00000abe00000abe00000abe00000abe00000abe
00000abe00000abe00000abe00000abe00000abe00000bba00000bba0000
0c6200000d1e00000dd800000e8e00000fbe00000fbe0000103400001034
000010b800001110000011d2000012660000130a000013bc000013bc0000
144e0000151a000015c40000165600001656000016dc000016dc00001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
000017800000178000001780000017800000178000001780000017800000
178000001780000017800000178000001780000017800000178000001780
0000178000001780000017800001000000f6005500070051000400020008
0040000a0000004d0094000200010000001d01620000000000000000005a
00090000000000000001003200630000000000000002000e009500000000
00000003006a00a300000000000000040032010d00000000000000050048
013f0000000000000006003201870001000000000000002d01b900010000
00000001001901e60001000000000002000701ff00010000000000030035
020600010000000000040019023b00010000000000050024025400010000
00000006001902780001000000000100000c029100010000000001010009
029d0001000000000102000902a60001000000000103000902af00010000
00000104000902b80001000000000105000902c100010000000001060009
02ca0001000000000107000900000003000104090000005a02d300030001
040900010032032d0003000104090002000e035f0003000104090003006a
036d0003000104090004003203d700030001040900050048040900030001
0409000600320451494e56495349424c4500a90031003900390030002c00
200031003900390031002c00200031003900390032002c00200031003900
390033002000540068006500200046006f006e0074002000420075007200
6500610075002c0049006e0063002e002000420075007200650061007500
470072006f00740065007300710075006500540068007200650065005300
6500760065006e0052006500670075006c00610072004d00610063007200
6f006d006500640069006100200046006f006e0074006f00670072006100
7000680065007200200034002e0031002000420075007200650061007500
470072006f00740065007300710075006500540068007200650065005300
6500760065006e00420075007200650061007500470072006f0074006500
73007100750065005400680072006500650053006500760065006e004d00
6100630072006f006d006500640069006100200046006f006e0074006f00
6700720061007000680065007200200034002e0031002000320039002f00
310030002f0039003800420075007200650061007500470072006f007400
650073007100750065005400680072006500650053006500760065006ea9
313939302c20313939312c20313939322c20313939332054686520466f6e
74204275726561752c496e632e2042757265617547726f74657371756554
68726565536576656e526567756c61724d6163726f6d6564696120466f6e
746f6772617068657220342e312042757265617547726f74657371756554
68726565536576656e42757265617547726f746573717565546872656553
6576656e4d6163726f6d6564696120466f6e746f6772617068657220342e
312032392f31302f393842757265617547726f7465737175655468726565
536576656e416c6c2046656174757265734e6f204368616e6765494e5649
5349424c45494e56495349424c45494e56495349424c45494e5649534942
4c45494e56495349424c4500a90031003900390030002c00200031003900
390031002c00200031003900390032002c00200031003900390033002000
540068006500200046006f006e0074002000420075007200650061007500
2c0049006e0063002e002000420075007200650061007500470072006f00
740065007300710075006500540068007200650065005300650076006500
6e0052006500670075006c00610072004d006100630072006f006d006500
640069006100200046006f006e0074006f00670072006100700068006500
7200200034002e0031002000420075007200650061007500470072006f00
740065007300710075006500540068007200650065005300650076006500
6e00420075007200650061007500470072006f0074006500730071007500
65005400680072006500650053006500760065006e004d00610063007200
6f006d006500640069006100200046006f006e0074006f00670072006100
7000680065007200200034002e0031002000320039002f00310030002f00
39003800420075007200650061007500470072006f007400650073007100
750065005400680072006500650053006500760065006e00000040090303
020201010000018db801ff85456844456844456844456844b3050446002b
b3070646002bb10404456844b1060645684400>
[6017 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 944 23 <0002001c000001d00300000a000d00634025010e0e400f000d0c0b0a0905
0401000d0c0b0a090806050403020100080702030200010546762f371800
3f3c3f3c012e2e2e2e2e2e2e2e2e2e2e2e2e002e2e2e2e2e2e2e2e2e3130
014968b90005000e496861b0405258381137b9000effc038592523152335
23351333113323350701d04c9bcdcf994ce76b727272b701d7fdf1fcfc00
>HJCBAA+BureauGrotesqueThreeSeven AddT42Char 
1 0 0 <0002003f000001b603200003000700564020010808400902070404010006
0504030205040700070607010201030000010046762f3718003f3c2f3c10
fd3c10fd3c012f3cfd3c2f3cfd3c003130014968b900000008496861b040
5258381137b90008ffc0385933112111253311233f0177fec7fafa0320fc
e03f02a3>HJCBAA+BureauGrotesqueThreeSeven AddT42Char 
HJCBAA+BureauGrotesqueThreeSeven /CharStrings get begin
/four 23 def
end
HJCBAA+BureauGrotesqueThreeSeven /Encoding get
dup 52 /four put
pop
end
%ADOEndSubsetFont
reset_gvm
/CCKEOY+BureauGrotesqueThreeSeven /HJCBAA+BureauGrotesqueThreeSeven findfont ct_VMDictPut
/CCKEOY+BureauGrotesqueThreeSeven*1 
[52{/.notdef}rp /four 203{/.notdef}rp]
CCKEOY+BureauGrotesqueThreeSeven nf
CCKEOY+BureauGrotesqueThreeSeven*1 [9 0 0 -9 0 0 ]msf
295.46 492.15 mo
(4)sh
255.225 -297.388 mo
340.05 -297.388 li
340.05 -345.577 li
255.225 -345.577 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.831 .796 .765 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.894 .192 .165 colr
true set_gvm
%ADOBeginSubsetFont: HIBBAA+Caslon540LTStd-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
CCKEOV+Caslon540LTStd-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DC54C6E6FE22C0E84062FCBC51598F22CDD843F5A2C
13AF950E0A8D4A73DED8B8B37F847FE76794FBB5B55ED48382E2324C8277B26E
CF181E8704645FCE07EFBE3C16F60C1A> |-
/bar <1C60D8A8C9B854D0F8E39C42369892391550A4DF4C2E014E8B8745415A
4EB9A2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CCKEOV+Caslon540LTStd-Roman /Encoding get
dup 49 /one put
dup 124 /bar put
pop
%ADOEndSubsetFont
reset_gvm
/CCKEOV+Caslon540LTStd-Roman*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright 4{/.notdef}rp /comma /.notdef /period 
2{/.notdef}rp /one 8{/.notdef}rp /colon 8{/.notdef}rp /C 7{/.notdef}rp /K 
/L 7{/.notdef}rp /T /U 10{/.notdef}rp /quoteleft /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v /w /.notdef /y 2{/.notdef}rp 
/bar 58{/.notdef}rp /bullet 72{/.notdef}rp]
CCKEOV+Caslon540LTStd-Roman nf
CCKEOV+Caslon540LTStd-Roman*1 [12 0 0 -12 0 0 ]msf
262.688 -307.388 mo
(1 | The basics)
[6 3 3.336 2.556 9.336 6.672 6 3 6.672 5.328 4.66809 3.336 
5.328 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
